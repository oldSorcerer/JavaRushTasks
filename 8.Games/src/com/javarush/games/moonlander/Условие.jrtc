taskKey="com.javarush.games.moonlander.part15"\n\nИгра Moon Lander (15/23)

Создадим метод land, который будет отвечать за приземление ракеты. Так как приземлением считается пересечение
ракеты и платформы, для корректного отображения нам нужно поднять ракету на одну позицию вверх, чтобы она не &quot;наезжала&quot;
на платформу. Еще нам понадобится специальное поле, которое будет отвечать за остановку игры. В начале игры значение
этого поля будет false. Когда нужно остановить игру, мы будем устанавливать ему значение true.
Теперь займемся реализацией метода win. Он должен вызвать метод land у ракеты, показать сообщение
о выигрыше и остановить игру.


Требования:
1.	В классе Rocket должен существовать публичный метод void land().
2.	В методе land() значение поля y должно уменьшаться на единицу.
3.	В классе MoonLanderGame должно существовать приватное поле isGameStopped типа boolean.
4.	Поле isGameStopped должно быть проинициализировано значением false в методе createGame().
5.	В методе win() у ракеты должен вызываться метод land().
6.	В методе win() необходимо установить полю isGameStopped значение true.
7.	В методе win() должен вызываться метод showMessageDialog(Color, String, Color, int).
8.	В методе win() должен вызываться метод stopTurnTimer().


Игра Moon Lander (15/23)

Для удобства проверки приземления ракеты создадим платформу(GameObject platform). При инициализации в качестве матрицы передай
ShapeMatrix.PLATFORM &mdash; ее мы добавили в класс ShapeMatrix. Теперь реализуем метод check. Он будет вызывать метод win или
gameOver в зависимости от ситуации. Когда будешь писать код метода check, для проверки пересечений ракеты с другими объектами
используй реализованный нами метод isCollision, который мы добавили в класс Rocket. Этот метод принимает в качестве параметра
объект типа GameObject и возвращает true, если ракета пересекается с этим объектом.



Игра Moon Lander (15/23)

Сейчас мы объявим несколько методов, которые пригодятся нам в будущем.
Метод check будет проверять пересечение координат ракеты и ландшафта.
Методы win и gameOver будут отвечать за выигрыш и проигрыш соответственно.
Метод isStopped будет проверять &quot;мягкость&quot; посадки. Если ракета слишком быстро приземляется на
платформу(speedY достаточно большое), метод вернет false.



Игра Moon Lander (15/23)

Как ты заметил, после отпускания клавиши движения влево или вправо ракета сразу прекращает движение, а нужно
чтобы она продолжала движение по инерции. Чтобы реализовать это, будем использовать переменную slowdown,
которая отвечает за замедление ракеты. Если мы отпускаем клавиши движения вправо или влево, в методе move
значение speedX ракеты будет плавно уменьшаться на значение slowdown, пока не достигнет 0.



Игра Moon Lander (15/23)

На данный момент ракета может улетать за пределы игрового поля. Давай это исправим. Создадим специальный метод, в котором будем
проверять достижение ракетой границ экрана: левой, правой и верхней. Если ракета достигает одну из указанных границ, возвращаем
ее в пределы игрового поля. Этот метод нужно вызывать в методе move последним действием.
Достижение ракетой нижней границы экрана проверять не нужно, так как там находится ландшафт. Проверку
на пересечение с ландшафтом мы сделаем позже.



Игра Moon Lander (15/23)

Продолжим реализацию движения ракеты. Она должна двигаться и по вертикали, и по горизонтали.
Давай внесем соответствующие изменения в метод move: теперь он будет принимать в качестве параметров состояния
нажатия клавиш. Первый параметр &mdash; это isUpPressed, второй &mdash; isLeftPressed, третий &mdash; isRightPressed.
Для установки скорости движения по оси X создадим переменную speedX. Значение этой переменной, как и
speedY, будет изменяться в методе move в зависимости от нажатых клавиш. Также не забудь об изменении самих
координат(x и y).



