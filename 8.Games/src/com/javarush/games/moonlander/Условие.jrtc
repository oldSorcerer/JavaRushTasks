taskKey="com.javarush.games.moonlander.part22"\n\nИгра Moon Lander (22/23)

Игра занимательная, но все-таки здорово было бы добавить счет очков. Очки мы будем считать по такому принципу: чем быстрее посадил
ракету, тем меньше игровых очков это стоило. Поэтому мы будем уменьшать количество очков с течением времени (на каждом шаге игры), пока
не достигнем 0. Для подсчета очков введем переменную score, в которой будем хранить их количество. Чтобы счет отображался
на игровом поле, нам нужно воспользоваться специальным методом setScore класса Game, в который передаем общее
количество очков. И не забудь обнулить очки, если игра проиграна. Чтобы корректно отобразить очки после проигрыша,
вызов метода setScore должен идти после вызова метода check.


Требования:
1.	В классе MoonLanderGame должно существовать приватное поле score типа int.
2.	Поле score должно быть проинициализировано в методе createGame() значением 1000.
3.	Метод onTurn(int) должен уменьшать значение поля score на единицу, если значение поля score положительное.
4.	Метод onTurn(int) должен вызвать метод setScore(int) с параметром score после вызова метода check().
5.	Метод gameOver() должен установить полю score значение 0.


Игра Moon Lander (22/23)

Чтобы полностью реализовать анимацию, необходимо в методе switchFire учесть наличие боковых огней.
Поэтому в параметры существующего метода switchFire добавим переменные, отвечающие за нажатие клавиш движения в стороны,
т.е. первым параметром метода будет isUpPressed, вторым &mdash; isLeftPressed, третьим &mdash; isRightPressed.
Также по аналогии с обработкой параметра isUpPressed добавим обработку isLeftPressed и isRightPressed.
Обрати внимание, что координата x у разных огней разная, а координата y &mdash; одинаковая. Не забудь исправить вызов метода switchFire.



Игра Moon Lander (22/23)

На данном этапе мы отрисуем нашу первую анимацию. Нам понадобятся методы show и hide, которые будут отвечать
за отображение и скрытие реактивной тяги, а также метод switchFire который будет задавать координаты тяги и вызывать
методы show и hide в зависимости от переданного параметра. Чтобы реактивная тяга отображалась внизу по центру
ракеты, нужно установить для нее координаты x и y определенным образом:
- в поле x огня мы устанавливаем значение x (позиция левой границы) ракеты + ширина ракеты, поделенная на 2. Таким образом
x тяги окажется посредине ракеты;
- в поле y огня мы устанавливаем значение y (позиция верхней границы) ракеты + высота ракеты. Таким образом y тяги окажется
внизу ракеты;
Не забудь вызвать метод switchFire в методе move &mdash; это позволит переключать анимацию при каждом ходе игры.
Кроме того, нам нужно переопределить метод draw ракеты, чтобы иметь возможность рисовать тягу вместе с ракетой.



Игра Moon Lander (22/23)

На этом этапе мы будем дорабатывать отображение анимации реактивной тяги. Добавим и реализуем метод nextFrame(), который
будет переключать кадры для создания анимации (устанавливать текущую матрицу из frames в переменную matrix).
Также переопределим метод draw, который будет менять кадр для анимации (вызвав метод nextFrame) и вызывать метод
суперкласса для отрисовки в том случае, если isVisible == true.



Игра Moon Lander (22/23)

Продолжаем реализацию реактивной тяги. На этом этапе в класс Rocket мы добавим переменные, которые описывают
правую, левую и нижнюю тяги. Заполним эти поля в конструкторе соответствующими матрицами из класса ShapeMatrix,
которые мы подготовили заранее.



Игра Moon Lander (22/23)

Пришла пора реализовать реактивную тягу ракеты. На этом этапе создадим класс RocketFire, который будет отвечать
за отрисовку и анимирование огня выхлопа. Список матриц шагов анимаций будет храниться в его переменной frames типа List.
Переменная frameIndex будет хранить индекс текущей матрицы-анимации, а переменная isVisible будет отвечать за видимость огня.



