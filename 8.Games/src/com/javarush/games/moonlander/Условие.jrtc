taskKey="com.javarush.games.moonlander.part23"\n\nИгра Moon Lander (23/23)

Поздравляю! Игра написана. Теперь можно в нее поиграть!
Если есть время и вдохновение, можешь улучшить игру, добавив некоторые &quot;фичи&quot; от себя. Например:
&bull; усложнить или упростить игру, изменив ландшафт (например, добавив туннель);
&bull; сделать несколько ландшафтов/уровней;
&bull; добавить визуальные эффекты (анимацию).
Готовую игру ты можешь опубликовать на JavaRush. Но перед этим нужно отправить свое решение на проверку,
чтобы кнопка публикации стала активной. Игра будет доступна в разделе &quot;Игры&quot; всем пользователям.
А еще ты можешь поделиться ею с друзьями в соцсетях. Будет здорово, если они сыграют в твою версию &quot;Moon Lander&quot;,
не так ли? После публикации, в комментариях напиши краткую инструкцию (какие действия доступны,
какие клавиши или кнопки нужно использовать для игры), а также особенности твоей реализации.


Требования:
1.	Запусти игру и наслаждайся!


Игра Moon Lander (23/23)

Игра занимательная, но все-таки здорово было бы добавить счет очков. Очки мы будем считать по такому принципу: чем быстрее посадил
ракету, тем меньше игровых очков это стоило. Поэтому мы будем уменьшать количество очков с течением времени (на каждом шаге игры), пока
не достигнем 0. Для подсчета очков введем переменную score, в которой будем хранить их количество. Чтобы счет отображался
на игровом поле, нам нужно воспользоваться специальным методом setScore класса Game, в который передаем общее
количество очков. И не забудь обнулить очки, если игра проиграна. Чтобы корректно отобразить очки после проигрыша,
вызов метода setScore должен идти после вызова метода check.



Игра Moon Lander (23/23)

Чтобы полностью реализовать анимацию, необходимо в методе switchFire учесть наличие боковых огней.
Поэтому в параметры существующего метода switchFire добавим переменные, отвечающие за нажатие клавиш движения в стороны,
т.е. первым параметром метода будет isUpPressed, вторым &mdash; isLeftPressed, третьим &mdash; isRightPressed.
Также по аналогии с обработкой параметра isUpPressed добавим обработку isLeftPressed и isRightPressed.
Обрати внимание, что координата x у разных огней разная, а координата y &mdash; одинаковая. Не забудь исправить вызов метода switchFire.



Игра Moon Lander (23/23)

На данном этапе мы отрисуем нашу первую анимацию. Нам понадобятся методы show и hide, которые будут отвечать
за отображение и скрытие реактивной тяги, а также метод switchFire который будет задавать координаты тяги и вызывать
методы show и hide в зависимости от переданного параметра. Чтобы реактивная тяга отображалась внизу по центру
ракеты, нужно установить для нее координаты x и y определенным образом:
- в поле x огня мы устанавливаем значение x (позиция левой границы) ракеты + ширина ракеты, поделенная на 2. Таким образом
x тяги окажется посредине ракеты;
- в поле y огня мы устанавливаем значение y (позиция верхней границы) ракеты + высота ракеты. Таким образом y тяги окажется
внизу ракеты;
Не забудь вызвать метод switchFire в методе move &mdash; это позволит переключать анимацию при каждом ходе игры.
Кроме того, нам нужно переопределить метод draw ракеты, чтобы иметь возможность рисовать тягу вместе с ракетой.



Игра Moon Lander (23/23)

На этом этапе мы будем дорабатывать отображение анимации реактивной тяги. Добавим и реализуем метод nextFrame(), который
будет переключать кадры для создания анимации (устанавливать текущую матрицу из frames в переменную matrix).
Также переопределим метод draw, который будет менять кадр для анимации (вызвав метод nextFrame) и вызывать метод
суперкласса для отрисовки в том случае, если isVisible == true.



Игра Moon Lander (23/23)

Продолжаем реализацию реактивной тяги. На этом этапе в класс Rocket мы добавим переменные, которые описывают
правую, левую и нижнюю тяги. Заполним эти поля в конструкторе соответствующими матрицами из класса ShapeMatrix,
которые мы подготовили заранее.



