taskKey="com.javarush.games.moonlander.part16"\n\nИгра Moon Lander (16/23)

Займемся методом, отвечающим за крушение ракеты при ее пересечении с ландшафтом. Этот метод будет менять внешнее
отображение ракеты путем замены ее матрицы (матрицу ты найдешь в классе ShapeMatrix). Теперь реализуем метод gameOver.
Он должен вызвать метод crash у ракеты, показать сообщение о проигрыше и остановить игру. Кроме того, добавим перезапуск
игры при нажатии клавиши SPACE.


Требования:
1.	В классе Rocket должен существовать публичный метод void crash().
2.	В методе crash() значение поля matrix должно быть заменено на матрицу ShapeMatrix.ROCKET_CRASH.
3.	В методе gameOver() у ракеты должен вызываться метод crash().
4.	В методе gameOver() необходимо установить полю isGameStopped значение true.
5.	В методе gameOver() должен вызываться метод showMessageDialog(Color, String, Color, int).
6.	В методе gameOver() должен вызываться метод stopTurnTimer().
7.	Если параметр метода onKeyPress(Key) клавиша &quot;SPACE&quot; и выполнено условие isGameStopped == true (игра остановлена), этот метод должен вызывать createGame() и больше ничего не делать.


Игра Moon Lander (16/23)

Создадим метод land, который будет отвечать за приземление ракеты. Так как приземлением считается пересечение
ракеты и платформы, для корректного отображения нам нужно поднять ракету на одну позицию вверх, чтобы она не &quot;наезжала&quot;
на платформу. Еще нам понадобится специальное поле, которое будет отвечать за остановку игры. В начале игры значение
этого поля будет false. Когда нужно остановить игру, мы будем устанавливать ему значение true.
Теперь займемся реализацией метода win. Он должен вызвать метод land у ракеты, показать сообщение
о выигрыше и остановить игру.



Игра Moon Lander (16/23)

Для удобства проверки приземления ракеты создадим платформу(GameObject platform). При инициализации в качестве матрицы передай
ShapeMatrix.PLATFORM &mdash; ее мы добавили в класс ShapeMatrix. Теперь реализуем метод check. Он будет вызывать метод win или
gameOver в зависимости от ситуации. Когда будешь писать код метода check, для проверки пересечений ракеты с другими объектами
используй реализованный нами метод isCollision, который мы добавили в класс Rocket. Этот метод принимает в качестве параметра
объект типа GameObject и возвращает true, если ракета пересекается с этим объектом.



Игра Moon Lander (16/23)

Сейчас мы объявим несколько методов, которые пригодятся нам в будущем.
Метод check будет проверять пересечение координат ракеты и ландшафта.
Методы win и gameOver будут отвечать за выигрыш и проигрыш соответственно.
Метод isStopped будет проверять &quot;мягкость&quot; посадки. Если ракета слишком быстро приземляется на
платформу(speedY достаточно большое), метод вернет false.



Игра Moon Lander (16/23)

Как ты заметил, после отпускания клавиши движения влево или вправо ракета сразу прекращает движение, а нужно
чтобы она продолжала движение по инерции. Чтобы реализовать это, будем использовать переменную slowdown,
которая отвечает за замедление ракеты. Если мы отпускаем клавиши движения вправо или влево, в методе move
значение speedX ракеты будет плавно уменьшаться на значение slowdown, пока не достигнет 0.



Игра Moon Lander (16/23)

На данный момент ракета может улетать за пределы игрового поля. Давай это исправим. Создадим специальный метод, в котором будем
проверять достижение ракетой границ экрана: левой, правой и верхней. Если ракета достигает одну из указанных границ, возвращаем
ее в пределы игрового поля. Этот метод нужно вызывать в методе move последним действием.
Достижение ракетой нижней границы экрана проверять не нужно, так как там находится ландшафт. Проверку
на пересечение с ландшафтом мы сделаем позже.



