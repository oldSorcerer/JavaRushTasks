taskKey="com.javarush.games.moonlander.part18"\n\nИгра Moon Lander (18/23)

Продолжаем реализацию реактивной тяги. На этом этапе в класс Rocket мы добавим переменные, которые описывают
правую, левую и нижнюю тяги. Заполним эти поля в конструкторе соответствующими матрицами из класса ShapeMatrix,
которые мы подготовили заранее.


Требования:
1.	В классе Rocket должно существовать приватное поле downFire типа RocketFire.
2.	В классе Rocket должно существовать приватное поле leftFire типа RocketFire.
3.	В классе Rocket должно существовать приватное поле rightFire типа RocketFire.
4.	В конструкторе класса Rocket поле downFire должно инициализироваться новым объектом типа RocketFire, конструктор которого принимает список, содержащий ShapeMatrix.FIRE_DOWN_1, ShapeMatrix.FIRE_DOWN_2, ShapeMatrix.FIRE_DOWN_3 в указанном порядке.
5.	В конструкторе класса Rocket поле leftFire должно инициализироваться новым объектом типа RocketFire, конструктор которого принимает список, содержащий ShapeMatrix.FIRE_SIDE_1, ShapeMatrix.FIRE_SIDE_2.
6.	В конструкторе класса Rocket поле rightFire должно инициализироваться новым объектом типа RocketFire, конструктор которого принимает список, содержащий ShapeMatrix.FIRE_SIDE_1, ShapeMatrix.FIRE_SIDE_2.


Игра Moon Lander (18/23)

Пришла пора реализовать реактивную тягу ракеты. На этом этапе создадим класс RocketFire, который будет отвечать
за отрисовку и анимирование огня выхлопа. Список матриц шагов анимаций будет храниться в его переменной frames типа List.
Переменная frameIndex будет хранить индекс текущей матрицы-анимации, а переменная isVisible будет отвечать за видимость огня.



Игра Moon Lander (18/23)

Займемся методом, отвечающим за крушение ракеты при ее пересечении с ландшафтом. Этот метод будет менять внешнее
отображение ракеты путем замены ее матрицы (матрицу ты найдешь в классе ShapeMatrix). Теперь реализуем метод gameOver.
Он должен вызвать метод crash у ракеты, показать сообщение о проигрыше и остановить игру. Кроме того, добавим перезапуск
игры при нажатии клавиши SPACE.



Игра Moon Lander (18/23)

Создадим метод land, который будет отвечать за приземление ракеты. Так как приземлением считается пересечение
ракеты и платформы, для корректного отображения нам нужно поднять ракету на одну позицию вверх, чтобы она не &quot;наезжала&quot;
на платформу. Еще нам понадобится специальное поле, которое будет отвечать за остановку игры. В начале игры значение
этого поля будет false. Когда нужно остановить игру, мы будем устанавливать ему значение true.
Теперь займемся реализацией метода win. Он должен вызвать метод land у ракеты, показать сообщение
о выигрыше и остановить игру.



Игра Moon Lander (18/23)

Для удобства проверки приземления ракеты создадим платформу(GameObject platform). При инициализации в качестве матрицы передай
ShapeMatrix.PLATFORM &mdash; ее мы добавили в класс ShapeMatrix. Теперь реализуем метод check. Он будет вызывать метод win или
gameOver в зависимости от ситуации. Когда будешь писать код метода check, для проверки пересечений ракеты с другими объектами
используй реализованный нами метод isCollision, который мы добавили в класс Rocket. Этот метод принимает в качестве параметра
объект типа GameObject и возвращает true, если ракета пересекается с этим объектом.



Игра Moon Lander (18/23)

Сейчас мы объявим несколько методов, которые пригодятся нам в будущем.
Метод check будет проверять пересечение координат ракеты и ландшафта.
Методы win и gameOver будут отвечать за выигрыш и проигрыш соответственно.
Метод isStopped будет проверять &quot;мягкость&quot; посадки. Если ракета слишком быстро приземляется на
платформу(speedY достаточно большое), метод вернет false.



