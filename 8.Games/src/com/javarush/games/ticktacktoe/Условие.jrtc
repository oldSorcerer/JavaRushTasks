taskKey="com.javarush.games.ticktacktoe"\n\nИгра Крестики-нолики (6/14)

Игра Крестики-нолики (6/14)

По правилам игры нельзя изменять уже занятую клетку (у которой в model стоит что-то кроме нуля). Добавим этот запрет в начало метода onMouseLeftClick().

Создадим переменную private boolean isGameStopped. В ней будем хранить состояние игры:

true — игра остановлена,
false — игра продолжается.
Новая игра начинается в методе startGame(), поэтому в нем присвоим переменной значение false. А в начале метода onMouseLeftClick() добавим проверку этой переменной, и если игра остановлена — прервем выполнение метода.

Требования:
•	Метод onMouseLeftClick() не должен изменять клетку в которой уже стоит какой-то знак.
•	В классе TicTacToeGame должна существовать переменная private int isGameStopped.
•	В методе startGame() нужно присвоить false переменной isGameStopped.
•	Метод onMouseLeftClick() не должен изменять игровое поле если игра остановлена (в isGameStopped значение true).


Игра Крестики-нолики (5/14)

Создадим метод public void onMouseLeftClick(int x, int y). Он будет вызывать при клике левой клавишей мышки по игровому полю.

onMouseLeftClick должен записать в ячейку model[x][y] значение currentPlayer.
После этого он должен вызвать updateView().
И после этого переключить значение currentPlayer, например так: currentPlayer = 3 - currentPlayer.
Домашнее задание:
раскрасить X, 0 в разные цвета. Использовать метод setCellValueEx().

Требования:
•	В классе TicTacToeGame должен быть метод public void onMouseLeftClick(int, int).
•	Метод onMouseLeftClick(x, y) должен записывать в ячейку model[x][y] значение currentPlayer.
•	Метод onMouseLeftClick(x, y) должен вызывать метод updateView().
•	Метод onMouseLeftClick() должен менять значение currentPlayer с 1 на 2 и наоборот.

Игра Крестики-нолики (4/14)

Создадим метод public void updateView() — для отображения всего массива model на игровом поле. Его можно сразу вызвать в initialize().

Теперь давайте его реализуем: он должен пройтись по массиву model и для каждого его элемента вызвать метод updateCellView().

Требования:
•	В классе TicTacToeGame должен быть метод public void updateView().
•	В методе initialize() должен быть вызван метод updateView().
•	В методе updateView() нужно для каждой ячейки массива model вызвать метод updateCellView() с соответствующими параметрами.

Игра Крестики-нолики (3/14)

Создадим метод public void updateCellView(int x, int y, int value) — для установки отображения конкретной ячейки. Он должен вызвать метод setCellValue, передать в него x и y, а третий параметр зависит от value:

если value равно 0, то третьим параметром передадим пустую строку " " (пробел),
если value равно 1, то третьим параметром передадим крестик "X" (большой латинский икс),
если value равно 2, то третьим параметром передадим большую букву "О" (большая латинская о).
Требования:
•	В классе TicTacToeGame должен быть метод public void updateCellView(int, int, int).
•	Метод updateCellView() должен установить в ячейку крестик, нолик, или очистить ее, в зависимости от значения параметра value.

Игра Крестики-нолики (2/14)

Для действий которые нужно выполнить в начале каждой новой игры (например, заполнения массива model нулями), создадим метод public void startGame() и вызовем его в initialize().

В startGame() присвоим currentPlayer значение 1, и заполним model нулями.

Требования:
•	В классе TicTacToeGame должен существовать метод public void startGame().
•	В методе initialize() должен быть вызван метод startGame().
•	В методе startGame() нужно присвоить 1 переменной currentPlayer.
•	В методе startGame() нужно заполнить все ячейки массива model нулями.

Игра Крестики-нолики (1/14)

Создадим метод public void initialize(). С этого метода будет начинаться выполнение нашей игры.
Чтобы разбить игровое поле на клетки размером 3х3, в initialize() вызовем метод setScreenSize(3, 3).

Для хранения состояния игрового поля создадим переменную private int[][] model = new int[3][3]. Это двумерный массив значения в котором будут означать:

0 — это пустая клетка,
1 — это ход первого игрока (крестик),
2 — это ход второго игрока (нолик).
Создадим переменную private int currentPlayer в которой будем запоминать какой игрок сейчас ходит (значение 1 или 2).

Требования:
•	В классе TicTacToeGame должен быть метод public void initialize().
•	В методе initialize() должен быть вызван метод setScreenSize(3, 3).
•	В классе TicTacToeGame должен существовать двумерный массив private int[][] model размером 3х3.
•	В классе TicTacToeGame должна существовать переменная private int currentPlayer.