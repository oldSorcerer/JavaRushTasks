taskKey="com.javarush.games.ticktacktoe.part07"\n\nИгра крестики-нолики (7/24)

При создании игры красота и анимация не менее важна, чем внутренняя логика игры.  Поэтому давайте сделаем нашу игру более красочной и яркой.  Раскрасьте каждый &quot;Х&quot; красным цветом, а &quot;O&quot; - синим.
Для этого вам вместо метод setCellValue(x, y, text) нужно воспользоваться методом setCellValueEx(x, y, cellColor, text, textColor)
В отличии от метода setCellValue(x, y, value), метод setCellValueEx(x, y, cellColor, text, textColor) принимает аж 5 параметров
- x, y &ndash; координаты ячейки
- cellColor &ndash; цвет фона ячейки
- text &ndash; текст, который нужно отобразить в ячейке
- textColor &ndash; цвет текста, который нужно отобразить
Примеры:
- setCellValueEx(1, 1, Color.WHITE, &quot;Красный&quot;, Color.RED);
- setCellValueEx(2, 3, Color.WHITE, &quot;Желтый&quot;, Color.YELLOW);
- setCellValueEx(0, 2, Color.WHITE, &quot;Зеленый&quot;, Color.GREEN);


Требования:
1.	В методе updateCellView() нужно вызывать метод setCellValueEx().
2.	Каждый Х должен быть раскрашен в красный цвет.
3.	Каждый О должен быть раскрашен в синий цвет.


Игра крестики-нолики (7/24)

У вашей игры есть модель, вы умеете отображать ее на экране, а значит осталось самое интересное - добавить установку новых крестиков и ноликов.
Для этого вам нужно добавить новый метод onMouseLeftClick(x,y), который будет вызываться каждый раз, когда пользователь кликнет мышкой по игровому полю.
Теперь приступайте к работе с мышкой:
Создадите метод public void onMouseLeftClick(int x, int y). Он будет вызываться игровым движком каждый раз,
когда пользователь будет кликать мышкой по игровому полю. Так же в него будут передаваться координаты ячейки,
по которой пользователь кликнул мышкой &ndash; (x,y).
Внутри метода onMouseLeftClick() вам нужно сделать 3 вещи:
- Записать в ячейку model[x][y] значение currentPlayer.
- Отобразить модель на экране, вызвав метод updateView()
- Переключить текущего игрока. Поменять 1 на 2, а 2 на 1.
Подсказка:
Переключить игрока можно так: currentPlayer = 3 - currentPlayer.
Если currentPlayer был равен 1, то он станет равен 2. А если был равен 2, то станет 1.



Игра крестики-нолики (7/24)

Отлично. У нас есть метод, который отвечает за отображение одной ячейки. Теперь давайте создадим метод, который будет отображать на экране все ячейки массива model.
Создайте метод public void updateView() &mdash; для отображения всех ячеек массива model на игровом поле. И сразу добавьте его вызов в конец метода initialize().
Внутри метода updateView() вы должны пройтись по всем ячейкам массива model, и отобразить значение каждой из них на экран:
- Напишите два вложенных цикла, которые проходятся по всем ячейкам массива model.
- Отобразите значение каждой ячейки на экране вызвав метод updateCellView(x, y, value).



Игра крестики-нолики (7/24)

Превосходно. Вы создали и проинициализировали модель. Теперь нужно написать два метода, которые будут заниматься отображением значений модели на экране (на нашей панели 3х3). Первый метод будет отвечать за отображения на экране всех ячеек, второй - только одной ячейки. Начнем с конца.
Создайте новый метод public void updateCellView(int x, int y, int value), который будет отображать &quot;Х&quot; или &quot;О&quot; в ячейке (x,y) игрового поля. Для отображения текста в ячейке (x,y) воспользуйтесь методом setCellValue(x, y, text); нашего игрового движка.
Логика работы метода updateCellView(int x, int y, int value):
- Если value равно 0, то в ячейке отобразить пустую строку - &quot; &quot; (пробел),
- Если value равно 1, то в ячейке отобразить крестик &quot;X&quot; (большой латинский икс),
- Если value равно 2, то в ячейке отобразить нолик &quot;О&quot; (большая латинская о).



Игра крестики-нолики (7/24)

Вы создали переменные, в которых ваша игра будет хранить свои состояния. Теперь их нужно проинициализировать &ndash;
присвоить переменным вашей модели стартовые значения. Обычно для этого делают отдельны метод и уже в нем пишут код
по инициализации переменных модели. Мы тоже так сделаем.
Создайте метод public void startGame(), в котором выполните следующие действия:
- каждой ячейке массива model присвойте значение 0 (0 - пустая клетка);
- переменной currentPlayer присвойте значение 1 (1 - ход первого игрока).
Так же метод startGame() нужно где-то вызвать. Добавьте вызов метода startGame() в самый конец метода initialize().



Игра крестики-нолики (7/24)

Отлично! Первое задание готово, можно приступать к следующему&hellip;
Большинство простых игр состоят из двух частей: модели и представления. Модель &ndash; это все данные, которые хранят состояния игры.
А представление &ndash; это то, что игрок видит, и с чем взаимодействует.
Поэтому нашим следующим шагом будет создание модели: объявление переменных, в которых ваша программа будет хранить свое состояние.
- Во-первых, вам нужно создать квадратный массив, который будет содержать значения клеток.
- Во-вторых, вам нужна переменная, в которой будет храниться номер текущего игрока.
Теперь приступайте к реализации модели:
Для хранения состояния игрового поля создайте переменную private int[][] model = new int[3][3].
Это двумерный массив, значения в котором будут означать:
- 0 &mdash; это пустая клетка,
- 1 &mdash; это ход первого игрока (крестик),
- 2 &mdash; это ход второго игрока (нолик).
Затем создайте переменную private int currentPlayer в которой будем запоминать, какой игрок сейчас ходит (1 &ndash; первый игрок, 2 &ndash; второй игрок).



