taskKey="com.javarush.games.ticktacktoe.part21"\n\nИгра крестики-нолики (21/24)

Давайте сделаем наш ИИ умнее: если он может выиграть одним ходом - пусть делает этот ход.
Для этого нам понадобиться вспомогательный метод checkFutureWin(int x, int y, int n). Он будет проверять -
можно ли выиграть игру одним ходом, если игрок n сделает ход в клетку (x,y)
Добавьте новый метод public boolean checkFutureWin(int x, int y, int n). Он должен вернуть true, если игрок n
выиграет игру, походив в клетку (x, y). Иначе метод должен вернуть false.
Подсказка:
Воспользуйтесь методом checkWin(x, y, n), чтобы проверить &ndash; выиграл ли игрок n, только что походив в клетку (x,y).


Требования:
1.	В классе TicTacToeGame должен быть метод public boolean checkFutureWin(int, int, int).
2.	Метод checkFutureWin(x, y, n) должен возвращать false если клетка (x,y) уже занята.
3.	Метод checkFutureWin(x, y, n) должен возвращать true, если походив в клетку (x, y) игрок n выиграет.
4.	Метод checkFutureWin(x, y, n) должен возвращать false, если походив в клетку (x, y) игрок n НЕ выиграет.
5.	После вызова метода checkFutureWin(x, y, n) состояние массива model должно быть таким же, как и до вызова этого метода.


Игра крестики-нолики (21/24)

Теперь научим компьютер ходить. Метод computerTurn() должен делать ход в определенную клетку.
Под &quot;походить в клетку&quot; мы понимаем вызов метода setSignAndCheck() с координатами клетки.
Давайте реализуем две простые стратегии:
- Проверим свободна ли центральная клетка, и если свободна, то походим в нее;
- Иначе походим в первую найденную свободную клетку.
Как лучше походить в первую найденную свободную клетку?
Самый простой вариант &ndash; это пройтись циклом по всем клеткам массива model и сделать ход в первую пустую клетку.
Важно:
Убедитесь что вы не делаете 2 и более &quot;ходов&quot;: если компьютер сделал ход, то метод computerTurn() нужно завершить.



Игра крестики-нолики (21/24)

Играть с человеком легко. Давайте переделаем свою игру так, чтобы человек играл с компьютером.
Сейчас вы на себе узнаете, насколько легко и просто реализовать качественны ИИ. Приступим&hellip;
Для начала создадим метод public void computerTurn(). Этот метод будет выполнять ход компьютера - делать ход в определенную клетку.
Метод computerTurn() нужно вызвать в самом конце метода onMouseLeftClick() и после этого еще раз сменить текущего игрока: currentPlayer = 3 - currentPlayer;.
В методе onMouseLeftClick() теперь будет происходить два хода:
- сначала ход человека в клетку, которую он выбрал
- затем переключение текущего игрока
- затем ход компьютера
- снова переключение текущего игрока



Игра крестики-нолики (21/24)

Игра почти готова, теперь можно сделать ее еще более красивой. Думаю, настало время улучшить текстовые сообщения.
Вам нужно заменить сообщения &quot;Player #1/2 win!&quot;  на сообщения &quot;You Win!&quot; и &quot;Game Over&quot;:
- &quot;You Win!&quot; нужно отобразить зеленым цветом, если первый игрок выиграл.
- &quot;Game Over&quot; нужно отображать красным, если первый игрок проиграл - выиграл второй.
Изменения нужно делать в методе setSignAndCheck().



Игра крестики-нолики (21/24)

Давайте еще улучшим нашу игру. Допустим игрок сделал ошибочный ход, и ему хочется начать игру заново.
Для этого совсем не обязательно ждать окончания игры. Давайте добавим возможность расторговать игру в любое время.
Делать это будем по нажатию клавиши Esc на клавиатуре: если пользователь нажал ESC, то стартануть игру заново. Даже если она еще не закончена.
Старая логика по-прежнему должна работать: если пользователь нажал пробел, и игра была закончена, то стартовать игру заново.
Пример проверки нажатия клавиши Esc:
if (key == Key.ESCAPE) { ... }



Игра крестики-нолики (21/24)

После того как игра завершилась, пользователи могут захотеть сыграть еще пару партий - надо им в этом помочь.
Давайте добавим возможность начинать новую игру по нажатию клавиши на клавиатуре.
Для этого создадим метод public void onKeyPress(Key key). Он будет автоматически вызываться игровым движком,
когда пользователь нажал любую клавишу на клавиатуре.
В этом методе вам нужно добавить проверку: если пользователь нажал пробел, и игра была закончена, то стартовать игру заново.
А чтобы стартовать игру заново вам нужно вызнать методы startGame() и updateView().
Пример проверки нажатия клавиши пробел:
if (key == Key.SPACE) { ... }



