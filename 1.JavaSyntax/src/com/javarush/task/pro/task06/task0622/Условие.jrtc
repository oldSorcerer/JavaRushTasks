taskKey="com.javarush.task.pro.task06.task0622.big04"\n\nДиабло (4)

Амиго сразился с Диабло, осталось определить победил Амиго или нет. Для этого создадим публичный статический метод
isAmigoWin(), который будет возвращать true, если Амиго победил и false в противном случае. Далее в методе main
вызовем метод isAmigoWin и, если метод вернул true, то нужно вывести в консоль фразу из переменной winPhrase, иначе
вывести фразу из переменной loosePhrase.


Требования:
1.	В классе Solution должен быть публичный статический метод isAmigoWin(), который возвращает значение типа boolean.
2.	Метод isAmigoWin() должен возвращать true, если у Диабло нет &quot;жизней&quot; или false, если Диабло жив.
3.	В методе main нужно вызвать метод isAmigoWin() после вызова метода battle().
4.	Если метод isAmigoWin() вернул true, то нужно вывести в консоль фразу из переменной winPhrase, иначе вывести фразу из переменной loosePhrase.


Диабло (4)

Теперь реализуем саму битву - метод battle(). Добавь в класс Solution публичный статический метод void battle. В этом методе
Амиго будет атаковать, а Диабло защищаться и контратаковать до тех пор, пока кто-то из них не лишиться всех &quot;жизней&quot;.
Если Амиго атаковал, а Диабло не защитился (зона защиты Диабло не совпала с зоной атаки Амиго), то Диабло теряет &quot;жизни&quot; -
вызываем соответствующий метод, если же Диабло защитился, он сразу же контратакует и Амиго теряет &quot;жизнь&quot; (снова вызываем нужный метод).
Кроме этого мы будем выводить в консоль ход битвы - если Диабло смог защититься, то выводим фразу из переменной diabloDefendPhrase.
Если же удар Амиго попал в цель, то выводим в консоль значение amigoAttackPhrase. Не забудь вызвать метод battle()
в методе main после вызова метода findDiablo().



Диабло (4)

В классе Solution добавь поля (переменные), которые будут отвечать за количество жизней Амиго и Диабло: amigoLives и diabloLives.
Присвой каждой из этих переменных значение 9 (сразу в строке инициализации). Далее добавим методы, вызов которых будет уменьшать &quot;жизни&quot;.
В классе Solution создай public static void методы:
- amigoLostLife(), в котором уменьши переменную amigoLives на 1;
- diabloLostLife(), в котором уменьши переменную diabloLives на 3.
Далее нам понадобятся методы атаки (Амиго) и защиты (Диабло):
- создай public static метод amigoAttacks(), который вернет случайное число в диапазоне от 1 до 3 (воспользуйся вспомагательным методом getRandomNumber);
- создай public static метод diabloDefends(), который также вернет случайное число в диапазоне от 1 до 3 (диапазоны зон атаки и защиты должны совпадать).



Диабло (4)

Давайте поможем Амиго победить Диабло. Для этого напишем программу, в которой они сразятся друг с другом.
Для начала Диабло нужно будет обнаружить, для этого мы сгенерируем ему случайную позицию (число от 1 до 4),
а потом будем угадывать в какой позиции он находится. После того, как Диабло будет найден, нужно будет сразиться
с ним. Для этого у Амиго и Диабло будет по 9 &quot;жизней&quot; (прям как у котов), Амиго будет атаковать, а Диабло - защищаться.
Но, если Диабло защитился, то он сразу же наносит Амиго ответный удар (Амиго теряет &quot;жизнь&quot;). Если же Диабло не защитился,
то он теряет 3 &quot;жизни&quot;. Атака и защита происходит рандомно в одной из трех зон (верх, середина, низ,
но для простоты будем использовать числа от 1 до 3). Ход боя и результат будут выводиться на экран в реальном времени.
Чтобы не было сложно, разобьем эту задачу на 4 этапа.

В этой (первой) части нужно в класс Solution добавить публичную статическую переменную (поле) diabloPosition типа int,
в которой будет храниться позиция Диабло. В методе main присвой этой перенной случайное значение от 1 до 4,
для этого воспользуйся уже реализованным методом getRandomNumber(int), передав в него верхнюю границу диапазона - число 4.
Далее в классе Solution создай публичный статический метод void findDiablo(), в котором сначала выведи на экран
значение переменной getFirstPositionPhrase, потом считывай с клавиатуры числа до тех пор, пока не будет угадана
позиция Диабло. При этом если позиция не угадана, то выведи фразу - значение переменной getPositionPhrase, а если угадал - то
значение переменной findDiabloPhrase. Вызови метод findDiablo в методе main после присвоения значения переменной diabloPosition.



