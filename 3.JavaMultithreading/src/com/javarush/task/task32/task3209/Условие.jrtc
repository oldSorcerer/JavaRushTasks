taskKey="com.javarush.task.task32.task3209.big12"\n\nHTML Editor (12)

12.1.	Напиши реализацию класса RedoAction:
12.1.1.	Добавь в класс поле View. Добавь его инициализацию в конструкторе.
12.1.2.	Реализуй метод actionPerformed(ActionEvent actionEvent), он должен вызывать метод
redo() у представления.
12.2.	Напиши реализацию класса UndoAction по аналогии с RedoAction.
12.3.	Изучи реализацию класса StrikeThroughAction, которую ты получил вместе с заданием и
реализуй аналогичным образом классы:
12.3.1.	SubscriptAction
12.3.2.	SuperscriptAction
Запусти программу и убедись, что пункты меню Подстрочный знак, Надстрочный знак и
Зачеркнутый работают. Пункты, отвечающие за отмену и возврат действия пока не
подключены к контроллеру и мы не сможем их проверить.


Требования:
1.	Класс RedoAction должен содержать поле View view.
2.	Конструктор класса RedoAction(View view) должен инициализировать поле view.
3.	Метод actionPerformed(ActionEvent actionEvent) класса RedoAction должен вызывать метод redo() у представления.
4.	Класс UndoAction должен содержать поле View view.
5.	Конструктор класса UndoAction(View view) должен инициализировать поле view.
6.	Метод actionPerformed(ActionEvent actionEvent) класса UndoAction должен вызывать метод undo() у представления.
7.	Конструктор без параметров класса SubscriptAction должен вызывать конструктор суперкласса с параметром StyleConstants.Subscript.
8.	Метод actionPerformed(ActionEvent actionEvent) класса SubscriptAction должен использовать метод setSubscript у StyleConstants с параметрами: SimpleAttributeSet и !StyleConstants.isSubscript(mutableAttributeSet).
9.	Конструктор без параметров класса SuperscriptAction должен вызывать конструктор суперкласса с параметром StyleConstants.Superscript.
10.	Метод actionPerformed(ActionEvent actionEvent) класса SuperscriptAction должен использовать метод setSuperscript у StyleConstants с параметрами: SimpleAttributeSet и !StyleConstants.isSuperscript(mutableAttributeSet).


HTML Editor (12)

11.1.	Добавь в представление поле UndoManager undoManager. Разберись для чего
используется этот класс. Проинициализируй поле класса новым объектом.
11.2.	Добавь класс UndoListener реализующий интерфейс UndoableEditListener в пакет
listeners. Этот класс будет следить за правками, которые можно отменить или вернуть.
11.3.	Добавь в класс UndoListener:
11.3.1.	Поле UndoManager undoManager.
11.3.2.	Конструктор, который принимает UndoManager и инициализирует поле класса.
11.3.3.	Метод undoableEditHappened(UndoableEditEvent e). Он должен из переданного
события получать правку и добавлять ее в undoManager.
11.4.	Добавь в представление поле UndoListener undoListener, проинициализируй его
используя undoManager.
11.5.	Добавь в представление методы:
11.5.1.	void undo() - отменяет последнее действие. Реализуй его используя undoManager.
Метод не должен кидать исключений, логируй их.
11.5.2.	void redo() - возвращает ранее отмененное действие. Реализуй его по аналогии с
предыдущим пунктом.
11.5.3.	Реализуй методы boolean canUndo() и boolean canRedo() используя undoManager.
11.5.4.	Реализуй геттер для undoListener.
11.5.5.	Добавь и реализуй метод void resetUndo(), который должен сбрасывать все правки в
менеджере undoManager.



HTML Editor (12)

Наш редактор будет поддерживать механизм отмены/возврата (undo/redo) действий в
редакторе.
Реализуй класс UndoMenuListener. Этот слушатель будет следить за меню, а если конкретнее,
то за моментом, когда меню редактирования будет выбрано пользователем. В этот момент он
будет запрашивать у представления можем ли мы сейчас отменить или вернуть какое-то
действие, и в зависимости от этого делать доступными или не доступными пункты меню
&quot;Отменить&quot; и &quot;Вернуть&quot;.
10.1.	Добавь в класс UndoMenuListener следующие поля:
10.1.1.	Представление View view.
10.1.2.	Пункт меню &quot;Отменить&quot; JMenuItem undoMenuItem.
10.1.3.	Пункт меню &quot;Вернуть&quot; JMenuItem redoMenuItem.
10.2.	Реализуй конструктор UndoMenuListener(View view, JMenuItem undoMenuItem,
JMenuItem redoMenuItem), он должен инициализировать поля класса.
10.3.	Реализуй метод menuSelected(MenuEvent menuEvent). Он будет вызываться перед
показом меню. Он должен:
10.3.1.	Спрашивать у представления можем ли мы отменить действие с помощью метода
boolean canUndo(). Пока у представления нет такого метода, поэтому добавь заглушку,
которая всегда возвращает false.
10.3.2.	Делать доступным или не доступным пункт меню undoMenuItem в зависимости от того,
что нам вернуло представление. Подсказка: используй метод setEnabled().
10.3.3.	Аналогично поступи и для пункта меню redoMenuItem, добавив метод-заглушку
canRedo() в представление.
Запусти программу и убедись, что пункты меню Отменить и Вернуть недоступны.



HTML Editor (12)

9.1.	Реализуй метод initMenuBar(). Он должен:
9.1.1.	Создавать новый объект типа JMenuBar. Это и будет наша панель меню.
9.1.2.	С помощью MenuHelper инициализировать меню в следующем порядке: Файл,
Редактировать, Стиль, Выравнивание, Цвет, Шрифт и Помощь.
9.1.3.	Добавлять в верхнюю часть панели контента текущего фрейма нашу панель меню,
аналогично тому, как это мы делали с панелью вкладок.
9.2.	Добавь конструктор класса View. Он должен устанавливать внешний вид и поведение
(look and feel) нашего приложения такими же, как это определено в системе.
Конструктор не должен кидать исключений, только логировать их с помощью
ExceptionHandler. Подсказа: для реализации задания используй класс UIManager.

Запусти приложение, теперь ты должен видеть панель с меню вверху окна. Некоторые из
пунктов меню (например: Вырезать, Копировать, Вставить, Стиль (частично), Выравнивание,
Цвет, Шрифт) должны уже работать. Убедись, что все работает и только затем продолжи
разработку.



HTML Editor (12)

Пришло время добавить все необходимые пункты меню и написать классы действий,
выполняемые при нажатии. Это довольно трудоемкая и рутинная работа, а ты отличный
ученик и не хотелось бы тебя огорчать. Поэтому, в качестве бонуса ты получаешь готовый класс
MenuHelper! А ты:
8.1.	Напиши в пакете actions заглушки для следующих классов:
8.1.1.	Класс отмены действия UndoAction. Он должен наследоваться от AbstractAction и
содержать конструктор UndoAction(View view).
8.1.2.	Класс возврата действия RedoAction. Требования аналогичны требованиям к
UndoAction.
8.1.3.	Класс StrikeThroughAction, который отвечает за стиль текста &quot;Зачеркнутый&quot;. Унаследуй
его от StyledEditorKit.StyledTextAction.
8.1.4.	Класс SubscriptAction, который отвечает за стиль текста &quot;Подстрочный знак&quot;. Его также
унаследуй от StyledEditorKit.StyledTextAction.
8.1.5.	Класс SuperscriptAction. Он будет отвечать за стиль &quot;Надстрочный знак&quot;. Добавь ему
правильный родительский класс.
8.2.	Напиши в пакете listeners заглушки для классов:
8.2.1.	UndoMenuListener, он должен реализовывать интерфейс MenuListener и иметь
конструктор UndoMenuListener(View view, JMenuItem undoMenuItem, JMenuItem
redoMenuItem). Чем он будет заниматься узнаешь чуть позже.
8.2.2.	TextEditMenuListener. Этот класс также должен реализовывать интерфейс MenuListener.
Добавь ему конструктор TextEditMenuListener(View view). В следующих заданиях мы
рассмотрим его детальнее.



HTML Editor (12)

Добавь класс MenuHelper. Это будет вспомогательный класс для инициализации и настройки
меню. У меню будет следующая структура:
- Файл
-- Новый
-- Открыть
-- Сохранить
-- Сохранить как...
-- Выход

- Редактировать
-- Отменить
-- Вернуть
-- Вырезать
-- Копировать
-- Вставить

- Стиль
-- Полужирный
-- Подчеркнутый
-- Курсив
-- Подстрочный знак
-- Надстрочный знак
-- Зачеркнутый

- Выравнивание
-- По левому краю
-- По центру
-- По правому краю

- Цвет
-- Красный
-- Оранжевый
-- Желтый
-- Зеленый
-- Синий
-- Голубой
-- Пурпурный
-- Черный

- Шрифт
-- Шрифт
--- SansSerif, Serif, Monospaced, Dialog, DialogInput,
-- Размер шрифта
--- 6, 8, 10, 12, 14, 16, 20, 24, 32, 36, 48, 72

- Помощь
-- О программе

7.1.	Реализуй в MenuHelper статический метод JMenuItem addMenuItem(JMenu parent, String
text, ActionListener actionListener), где parent - меню в которое мы добавляем пункт, text -
текст добавляемого пункта, actionListener - слушатель действий добавляемого пункта
меню. Он должен:
7.1.1.	Создавать новый пункт меню JMenuItem, используя text.
7.1.2.	Устанавливать этому пункту слушателя действий с помощью метода addActionListener().
7.1.3.	Добавлять в parent созданный пункт меню.
7.1.4.	Возвращать созданный пункт меню.
7.2.	Реализуй статический метод JMenuItem addMenuItem(JMenu parent, Action action). Этот
метод аналогичен предыдущему, но в качестве параметра принимает действие action,
которое необходимо выполнить при выборе пункта меню. Подсказка: при создании
JMenuItem передай в конструктор action. Разберись откуда возьмется имя пункта меню,
если его не устанавливать дополнительно.
7.3.	Реализуй статический метод JMenuItem addMenuItem(JMenu parent, String text, Action
action), который добавляет в parent новый пункт меню с текстом text и действием action
при выборе этого пункта меню. При реализации используй вызов метода из
предыдущего пункта.
7.4.	Добавь в MenuHelper заглушки для следующих статических методов:
7.4.1.	void initHelpMenu(View view, JMenuBar menuBar) - инициализация меню помощи.
7.4.2.	void initFontMenu(View view, JMenuBar menuBar) - инициализация меню выбора
шрифта.
7.4.3.	void initColorMenu(View view, JMenuBar menuBar) - инициализация меню выбора цвета.
7.4.4.	void initAlignMenu(View view, JMenuBar menuBar) - инициализация меню
выравнивания.
7.4.5.	void initStyleMenu(View view, JMenuBar menuBar) - инициализация меню выбора стиля
текста.
7.4.6.	void initEditMenu(View view, JMenuBar menuBar) - инициализация меню
редактирования текста.
7.4.7.	void initFileMenu(View view, JMenuBar menuBar) - инициализация меню Файл.



