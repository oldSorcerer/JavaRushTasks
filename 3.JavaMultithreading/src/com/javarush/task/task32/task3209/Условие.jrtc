taskKey="com.javarush.task.task32.task3209.big09"\n\nHTML Editor (9)

9.1.	Реализуй метод initMenuBar(). Он должен:
9.1.1.	Создавать новый объект типа JMenuBar. Это и будет наша панель меню.
9.1.2.	С помощью MenuHelper инициализировать меню в следующем порядке: Файл,
Редактировать, Стиль, Выравнивание, Цвет, Шрифт и Помощь.
9.1.3.	Добавлять в верхнюю часть панели контента текущего фрейма нашу панель меню,
аналогично тому, как это мы делали с панелью вкладок.
9.2.	Добавь конструктор класса View. Он должен устанавливать внешний вид и поведение
(look and feel) нашего приложения такими же, как это определено в системе.
Конструктор не должен кидать исключений, только логировать их с помощью
ExceptionHandler. Подсказа: для реализации задания используй класс UIManager.

Запусти приложение, теперь ты должен видеть панель с меню вверху окна. Некоторые из
пунктов меню (например: Вырезать, Копировать, Вставить, Стиль (частично), Выравнивание,
Цвет, Шрифт) должны уже работать. Убедись, что все работает и только затем продолжи
разработку.


Требования:
1.	В методе initMenuBar() должно создаваться новое меню (объект типа JMenuBar).
2.	В методе initMenuBar() c помощью MenuHelper должно быть проинициализировано меню в следующем порядке: Файл, Редактировать, Стиль, Выравнивание, Цвет, Шрифт и Помощь.
3.	В методе initMenuBar() должно добавляться новосозданное меню в верхнюю часть панели контента текущего фрейма, используя метод getContentPane().
4.	В конструкторе класса View, через класс UIManager, должен устанавливаться внешний вид и поведение (look and feel).


HTML Editor (9)

Пришло время добавить все необходимые пункты меню и написать классы действий,
выполняемые при нажатии. Это довольно трудоемкая и рутинная работа, а ты отличный
ученик и не хотелось бы тебя огорчать. Поэтому, в качестве бонуса ты получаешь готовый класс
MenuHelper! А ты:
8.1.	Напиши в пакете actions заглушки для следующих классов:
8.1.1.	Класс отмены действия UndoAction. Он должен наследоваться от AbstractAction и
содержать конструктор UndoAction(View view).
8.1.2.	Класс возврата действия RedoAction. Требования аналогичны требованиям к
UndoAction.
8.1.3.	Класс StrikeThroughAction, который отвечает за стиль текста &quot;Зачеркнутый&quot;. Унаследуй
его от StyledEditorKit.StyledTextAction.
8.1.4.	Класс SubscriptAction, который отвечает за стиль текста &quot;Подстрочный знак&quot;. Его также
унаследуй от StyledEditorKit.StyledTextAction.
8.1.5.	Класс SuperscriptAction. Он будет отвечать за стиль &quot;Надстрочный знак&quot;. Добавь ему
правильный родительский класс.
8.2.	Напиши в пакете listeners заглушки для классов:
8.2.1.	UndoMenuListener, он должен реализовывать интерфейс MenuListener и иметь
конструктор UndoMenuListener(View view, JMenuItem undoMenuItem, JMenuItem
redoMenuItem). Чем он будет заниматься узнаешь чуть позже.
8.2.2.	TextEditMenuListener. Этот класс также должен реализовывать интерфейс MenuListener.
Добавь ему конструктор TextEditMenuListener(View view). В следующих заданиях мы
рассмотрим его детальнее.



HTML Editor (9)

Добавь класс MenuHelper. Это будет вспомогательный класс для инициализации и настройки
меню. У меню будет следующая структура:
- Файл
-- Новый
-- Открыть
-- Сохранить
-- Сохранить как...
-- Выход

- Редактировать
-- Отменить
-- Вернуть
-- Вырезать
-- Копировать
-- Вставить

- Стиль
-- Полужирный
-- Подчеркнутый
-- Курсив
-- Подстрочный знак
-- Надстрочный знак
-- Зачеркнутый

- Выравнивание
-- По левому краю
-- По центру
-- По правому краю

- Цвет
-- Красный
-- Оранжевый
-- Желтый
-- Зеленый
-- Синий
-- Голубой
-- Пурпурный
-- Черный

- Шрифт
-- Шрифт
--- SansSerif, Serif, Monospaced, Dialog, DialogInput,
-- Размер шрифта
--- 6, 8, 10, 12, 14, 16, 20, 24, 32, 36, 48, 72

- Помощь
-- О программе

7.1.	Реализуй в MenuHelper статический метод JMenuItem addMenuItem(JMenu parent, String
text, ActionListener actionListener), где parent - меню в которое мы добавляем пункт, text -
текст добавляемого пункта, actionListener - слушатель действий добавляемого пункта
меню. Он должен:
7.1.1.	Создавать новый пункт меню JMenuItem, используя text.
7.1.2.	Устанавливать этому пункту слушателя действий с помощью метода addActionListener().
7.1.3.	Добавлять в parent созданный пункт меню.
7.1.4.	Возвращать созданный пункт меню.
7.2.	Реализуй статический метод JMenuItem addMenuItem(JMenu parent, Action action). Этот
метод аналогичен предыдущему, но в качестве параметра принимает действие action,
которое необходимо выполнить при выборе пункта меню. Подсказка: при создании
JMenuItem передай в конструктор action. Разберись откуда возьмется имя пункта меню,
если его не устанавливать дополнительно.
7.3.	Реализуй статический метод JMenuItem addMenuItem(JMenu parent, String text, Action
action), который добавляет в parent новый пункт меню с текстом text и действием action
при выборе этого пункта меню. При реализации используй вызов метода из
предыдущего пункта.
7.4.	Добавь в MenuHelper заглушки для следующих статических методов:
7.4.1.	void initHelpMenu(View view, JMenuBar menuBar) - инициализация меню помощи.
7.4.2.	void initFontMenu(View view, JMenuBar menuBar) - инициализация меню выбора
шрифта.
7.4.3.	void initColorMenu(View view, JMenuBar menuBar) - инициализация меню выбора цвета.
7.4.4.	void initAlignMenu(View view, JMenuBar menuBar) - инициализация меню
выравнивания.
7.4.5.	void initStyleMenu(View view, JMenuBar menuBar) - инициализация меню выбора стиля
текста.
7.4.6.	void initEditMenu(View view, JMenuBar menuBar) - инициализация меню
редактирования текста.
7.4.7.	void initFileMenu(View view, JMenuBar menuBar) - инициализация меню Файл.



HTML Editor (9)

Реализуй метод инициализации панелей редактора initEditor(). Он должен:
6.1.	Устанавливать значение &quot;text/html&quot; в качестве типа контента для компонента htmlTextPane.
Найди и используй подходящий метод.
6.2.	Создавать новый локальный компонент JScrollPane на базе htmlTextPane.
6.3.	Добавлять вкладку в панель tabbedPane с именем &quot;HTML&quot; и компонентом из предыдущего
пункта.
6.4.	Создавать новый локальный компонент JScrollPane на базе plainTextPane.
6.5.	Добавлять еще одну вкладку в tabbedPane с именем &quot;Текст&quot; и компонентом из
предыдущего пункта.
6.6.	Устанавливать предпочтительный размер панели tabbedPane.
6.7.	Создавать объект класса TabbedPaneChangeListener и устанавливать его в качестве
слушателя изменений в tabbedPane.
6.8.	Добавлять по центру панели контента текущего фрейма нашу панель с вкладками.
Получить панель контента текущего фрейма можно с помощью метода
getContentPane(), его реализация унаследовалась от JFrame.
Подумай, метод с какими параметрами необходимо вызвать, чтобы панель с вкладками отображалась
по центру панели контента текущего фрейма.
После запуска приложения можно будет увидеть текущие результаты: две независимые
закладки (HTML и Текст), в каждой из которых можно набирать свой текст.



HTML Editor (9)

5.1.	Объяви класс TabbedPaneChangeListener реализующий интерфейс ChangeListener в пакете
listeners. Этот класс будет слушать и обрабатывать изменения состояния панели вкладок.
Реализуй в этом классе:
5.1.1.	Конструктор, принимающий представление в виде параметра и сохраняющий во
внутреннее поле view класса.
5.1.2.	Переопредели метод из интерфейса ChangeListener, он должен вызывать метод
selectedTabChanged() у представления. Последнего метода еще нет, сделай для него
заглушку.
5.2.	Объяви класс ExceptionHandler. Это будет наш обработчик исключительных ситуаций,
который ты в дальнейшем сможешь переопределить. Пока добавь в него статический метод
log(Exception e), который будет выводить в консоль краткое описание проблемы
(используй метод toString у переданного исключения).



HTML Editor (9)

4.1.	Объяви методы initMenuBar() и initEditor() в классе View. Они будут отвечать за
инициализацию меню и панелей редактора.
4.2.	Объяви в представлении метод initGui(). Он будет инициализировать графический
интерфейс. Вызови из него инициализацию меню initMenuBar(), инициализацию редактора
initEditor() и метод pack(), реализацию которого мы унаследовали от класса JFrame.
Разберись что делает метод pack().
4.3.	Реализуй метод init() представления. Он должен:
4.3.1.	Вызывать инициализацию графического интерфейса initGui().
4.3.2.	Добавлять слушателя событий нашего окна. В качестве подписчика создай и используй
объект класса FrameListener. В качестве метода для добавления подписчика используй
подходящий метод из класса Window, от которого наследуется и наш класс через
классы JFrame и Frame.
4.3.3.	Показывать наше окно. Используй метод setVisible с правильным параметром.
На этом этапе приложение при запуске должно показывать окно, которое можно растягивать,
разворачивать, закрыть и т.д.



