taskKey="com.javarush.task.jdk13.task41.task4118"\n\nUsb mp3 плеер

В этой задаче будешь тренироваться применять шаблон Состояние.
Дана рабочая программа - аудиоплеер.
У плеера 4 кнопки, за которые отвечают 4 метода класса Player: onLock, onPlay, onNext и onPrevious.
Запусти плеер и посмотри как он сейчас работает. Разберись, что происходит в коде.
Как видишь, в этих 4 методах используются операторы switch которые меняют поведение метода в зависимости
от текущего состояния плеера определяемого полем state.
И тебе нужно избавиться от этих switch, введя отдельные классы для каждого состояния.

Сначала, в корневой папке задачи создай пакет states и в нем абстрактный класс State.
В классе State добавь поле protected Player player и protected конструктор с одним параметром инициализирующий его.
С помощью этого поля, состояния смогут вызывать методы плеера, в том числе методы меняющие состояние плеера.
В классе State объяви абстрактные методы onLock, onPlay, onNext, onPrevious, возвращающие String.
В эти методы в дальнейшем будет распределен код из аналогичных методов класса Player.

Можешь удалить перечисление State, а в классе Player (наш контекст) поле state сделай типа нашего нового абстрактного
класса State. Добавь ему геттер и сеттер.

Теперь в пакете states создай классы конкретных состояний, наследующие State: ReadyState, PlayingState, LockedState.
В методы onLock, onPlay, onNext и onPrevious класса ReadyState помести код из case READY методов класса Player.
Например, метод onLock должен установить плееру состояние LOCKED и вернуть строку &quot;Locked...&quot;. Но, так как теперь
состояние определяется полем State state, то код будет таким:
@Override
public String onLock() {
player.setState(new LockedState(player));
return &quot;Locked...&quot;;
}
Еще один пример: метод onPrevious класса ReadyState будет просто возвращать строку &quot;Locked...&quot;
(см. case READY в методе onPrevious класса Player). Таким образом реализуй все четыре метода класса ReadyState.
В конструкторе класса Player инициализируй поле state новым объектом ReadyState.

Аналогично классу ReadyState реализуй класс PlayingState (бери код из case PLAYING).
То же самое сделай и с классом LockedState (код из case LOCKED), только здесь будет одно дополнение.
Как видишь, метод onLock класса Player перед оператором switch еще устанавливает playing в false.
Эту логику нужно разместить в конструкторе LockedState, воспользуйся сеттером поля playing.

Теперь функционал методов onLock, onPlay, onNext, onPrevious класса Player полностью распределен по другим местам,
и эти методы больше не нужны, так что удали их.
Обращение к этим методам в классе UI замени на обращение через player.getState().

Запусти плеер и проверь, что после всех изменений логика его работы не поменялась.


Требования:
1.	Класс Solution не должен меняться.
2.	В пакете states должен существовать абстрактный класс State реализованный согласно условию.
3.	Поле state класса Player должно сменить тип, инициализироваться в конструкторе и иметь геттер с сеттером.
4.	В пакете states должен существовать класс ReadyState реализованный согласно условию.
5.	В пакете states должен существовать класс PlayingState реализованный согласно условию.
6.	В пакете states должен существовать класс LockedState реализованный согласно условию.
7.	В классе Player не должно быть методов onLock, onPlay, onNext, onPrevious.


