taskKey="com.javarush.task.jdk13.task41.task4102"\n\nФирменный рецепт

Сейчас метод main делает самую простую пиццу. Давай используем паттерн декоратор, чтобы разнообразить ассортимент.

Сначала, создай класс PizzaDecorator. Он должен быть абстрактным и реализовывать интерфейс Pizza.
У него должно быть приватное финальное поле decoratedPizza типа Pizza, которое инициализируется в конструкторе.
Реализуй методы getCost и getIngredients: они должны вызывать соответствующие методы у decoratedPizza.

Далее создай три класса: WithChicken, WithSausage, WithArugula. Пусть они все наследуют PizzaDecorator.
Их конструкторы должны просто вызывать конструктор родительского класса.
Переопредели методы:
- у WithChicken метод getCost добавляет к стоимости 20, метод getIngredients добавляет к ингредиентам &quot;, курица&quot;;
- у WithSausage метод getCost добавляет к стоимости 25, метод getIngredients добавляет к ингредиентам &quot;, колбаса&quot;;
- у WithChicken метод getCost добавляет к стоимости 15, метод getIngredients добавляет к ингредиентам &quot;, руккола&quot;.

Раскомментируй код в методе main и посмотри что получилось.
Добавь еще декораторов для любимых ингредиентов и придумай как еще улучшить программу.


Требования:
1.	Pizza и SimplePizza не должны изменяться.
2.	В корневой папке задачи должен быть абстрактный класс PizzaDecorator, реализующий Pizza.
3.	В классе PizzaDecorator должно быть приватное финальное поле decoratedPizza типа Pizza, которое инициализируется в конструкторе.
4.	В классе PizzaDecorator должны быть реализованы методы интерфейса Pizza согласно условию.
5.	В корневой папке задачи должен быть классы WithChicken, WithSausage, WithArugula наследующие PizzaDecorator.
6.	В классах WithChicken, WithSausage, WithArugula должны быть реализованы конструкторы и методы getCost и getIngredients согласно условию.


