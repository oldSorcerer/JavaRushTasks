taskKey="com.javarush.task.jdk13.task41.task4123"\n\nДоверяй, но перепроверяй

На примере этой абстрактной задачи, закрепишь Блокировку с двойной проверкой.
Разберись, что происходит в программе.
Как видишь, метод initDB уже синхронизирован и если запустить программу,
то все нити отработают правильно и вернут значение 100.
Но сейчас каждый раз при обращении к методу initDB происходит синхронизация,
хотя реально она нужна только при первом обращении к методу. Исправь это:
- убери у метода synchronized;
- весь код в if оберни в synchronized (this) {} блок;
- весь код внутри synchronized блока оберни в еще один if (isNull(users)) {}.

Но если теперь запустить программу, только один поток возвращает 100.
После того как первый поток выполняет строку users = new HashMap&lt;&gt;();
остальные потоки не заходят в блок synchronized, а получают не полностью заполненную мапу users.
Попробуй исправить это, добавив полю users модификатор volatile.

Запусти программу - volatile не помогло :)
В методе initDB внутри второго if-a создай локальную переменную Map&lt;Integer, User&gt; и в цикле заполняй ее, а не users.
После цикла присвой users значение этой локальной переменной.
Теперь должно работать правильно ;)


Требования:
1.	Класс Solution не должен меняться.
2.	Не должно быть синхронизации на уровне метода initDB.
3.	В методе initDB должно быть два блока if и одни блок synchronized согласно условию.
4.	Поле users должно быть volatile.
5.	В методе initDB во втором if-е должна использоваться промежуточная локальная мапа согласно условию.


