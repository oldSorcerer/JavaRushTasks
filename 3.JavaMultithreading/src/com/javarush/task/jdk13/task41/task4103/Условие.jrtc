taskKey="com.javarush.task.jdk13.task41.task4103"\n\nSurprise, анонимус!

В этой программе у нас есть банк крови, по которому можно осуществлять поиск. Ознакомься как все работает.
Используя BloodDB доступ к базе данных открыт для всех. Тебе нужно ограничить доступ, используя имеющуюся систему безопасности.
Т.к. все должно пройти максимально прозрачно со стороны пользователя, воспользуемся паттерном Заместитель.
В пакете blood создай класс BloodDBProxy, который будет реализовывать тот же интерфейс, что и BloodDB.
В классе создай три поля:
1) private final SecuritySystem security - с помощью него можно будет обращаться к системе безопасности;
2) private BloodDB db - собственно объект, для которого мы делаем заместителя;
3) private final BloodSample denied - его можно сразу инициализировать значением new BloodSample(0, &quot;access&quot;, &quot;denied&quot;, null, null, null).

В классе BloodDBProxy создай конструктор без параметров, который:
1) инициализирует поле security;
2) считает с консоли две строки: логин и пароль;
3) попробует авторизоваться в системе безопасности с помощью метода authorize;
4) проверит удачно ли прошла авторизация, и если удачно, то инициализирует поле db;

Реализуй в BloodDBProxy методы getById и find. Они должны проверить авторизацию в системе безопасности.
Если с авторизацией все хорошо, то перенаправить вызов объекту db.
Если же пользователь не авторизован, то методы должны вернуть объект denied.

И наконец, в методе main в инициализации переменной database замени BloodDB на BloodDBProxy.
Подумай, как еще повысить безопасность или оптимизировать систему добавив кеширующий прокси.


Требования:
1.	Нельзя изменять классы BloodDB, BloodSample, DB, SecuritySystem, User.
2.	В пакете blood должен быть класс BloodDBProxy, реализующий интерфейс DB.
3.	В классе BloodDBProxy должно быть три поля согласно условию.
4.	В классе BloodDBProxy должен быть конструктор без параметров, реализованный согласно условию.
5.	В классе BloodDBProxy должны быть реализованы методы getById и find согласно условию.


