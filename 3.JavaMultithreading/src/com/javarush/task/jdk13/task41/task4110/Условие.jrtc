taskKey="com.javarush.task.jdk13.task41.task4110"\n\nВсе ходы записаны

С помощью паттерна Строитель будем печь пиццы и записывать их рецепты.
Для пицц и их рецептов у нас будет два вида строителей, но интерфейс у них будет общий.

1. Сначала создай пакет builders и в нем интерфейс Builder и в нем четыре void метода:
setType(PizzaType type), setDough(String dough), setSauce(String sauce), setTopping(String topping).

2. В этом же пакете создай два класса строителей: PizzaBuilder и PizzaRecipeBuilder.
Они оба должны реализовывать интерфейс Builder. В каждом должно быть четыре приватных поля:
PizzaType type, String dough, String sauce, String topping.
Реализуй методы интерфейса, чтобы они работали как обычные сеттеры.
Кроме того, каждому строителю добавь метод getResult для получения результата строительства.
Метод должен возвращать Pizza и Recipe для соответствующих строителей.
Для этого надо использовать конструкторы этих классов передав в них значения полей строителя.

3. Создай пакет director и в нем класс Director. Добавь в класс два публичных void метода:
makeHawaiianPizza(Builder builder) и makeSpicyPizza(Builder builder).
В makeHawaiianPizza выполни все шаги строителя передав в них значения:
HAWAIIAN, &quot;обычное&quot;, &quot;мягкий&quot;, &quot;ветчина + ананас&quot;.
В makeSpicyPizza выполни все шаги строителя передав в них значения:
SPICY, &quot;запеченное&quot;, &quot;острый&quot;, &quot;пепперони + салями&quot;.

Раскомментируй код в методе main и проверь что все работает.
Чтобы добавить больше видов пицц, надо добавить значения в PizzaType и методы к ним в Director.


Требования:
1.	В пакете builders должен быть интерфейс Builder с четырьмя методами согласно условию.
2.	В пакете builders должен быть класс PizzaBuilder реализованный согласно условию.
3.	В пакете builders должен быть класс PizzaRecipeBuilder реализованный согласно условию.
4.	В пакете director должен быть класс Director реализованный согласно условию.


