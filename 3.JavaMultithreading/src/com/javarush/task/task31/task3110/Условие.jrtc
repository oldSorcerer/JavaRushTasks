taskKey="com.javarush.task.task31.task3110.big13"\n\nArchiver (13)

Продолжим наш путь к получению содержимого файла архива. Напишем метод getFilesList() в классе
ZipFileManager. Он будет возвращать список файлов в архиве, вернее список свойств этих файлов (класс
свойств FileProperties мы уже реализовали). Итак:
1.	Добавь метод List&lt;FileProperties&gt; getFilesList() throws Exception в класс ZipFileManager
2.	Внутри метода проверь является ли содержимое zipFile обычным файлом с помощью
подходящего метода класса Files. Если это не файл, брось исключение WrongZipFileException().
3.	Создай список с элементами типа FileProperties, в него мы будем складывать свойства файлов
4.	Создай входящий поток ZipInputStream, для файла из переменной zipFile. Как и в прошлые разы, оберни его создание
в try-with-resources
5.	Пройдись по всем элементам ZipEntry потока ZipInputStream
6.	Для каждого элемента ZipEntry вычитай его содержимое, иначе у нас не будет информации о его
размере. Нельзя узнать размер файла в архиве, не вычитав его. Это очень легко сделать с
помощью функции copyData, используя временный буфер типа ByteArrayOutputStream.
7.	Получи имя, размер, сжатый размер и метод сжатия элемента архива. Посмотри, что еще можно
узнать о нем.
8.	Создай объект класса FileProperties, используя полученные данные о файле.
9.	Добавь созданный объект из п.8 в список из п.3
10.	После выхода из цикла верни собранную информацию вызвавшему методу.


Требования:
1.	В классе ZipFileManager нужно создать публичный метод List&lt;FileProperties&gt; getFilesList() throws Exception.
2.	Если Path zipFile не является файлом, метод getFilesList должен кинуть исключение WrongZipFileException.
3.	Метод getFilesList должен пройтись по всем файлам архива и вернуть данные о них. Реализация должна быть выполнена согласно описанию в задании.
4.	Поток для чтения из архива должен быть закрыт.


Archiver (13)

Сегодня мы подготовимся к реализации команды ZipContentCommand. Она будет заниматься получением
содержимого архива. Содержимое архива &ndash; это упакованные файлы и папки, но нам было бы интересно
узнать не только имена объектов архива, но и их размер до и после сжатия, степень сжатия и метод
сжатия.
Создадим класс FileProperties, который будет отвечать за свойства каждого файла в архиве. Свойства &ndash; это
набор, состоящий из: имя файла, размер файла до и после сжатия, метод сжатия.
1.	Создай класс FileProperties
2.	Добавь в него приватные переменные класса:
2.1. Имя String name
2.2. Размер в байтах long size
2.3. Размер после сжатия в байтах long compressedSize
2.4. Метод сжатия int compressionMethod
3.	Добавь гетеры для них
4.	Добавь конструктор FileProperties(String name, long size, long compressedSize, int
compressionMethod)
5.	Добавь метод long getCompressionRatio(), который будет считать степень сжатия по формуле:
100 - ((compressedSize * 100) / size)
6.	Переопрередели метод String toString(), чтобы он возвращал строку по шаблону:
&ldquo;name size Kb (compressedSize Kb) сжатие: compressionRatio%&rdquo;, если размер size больше нуля, иначе он должен
вернуть только имя файла. Нулевой размер может быть, например, у директории. Не забудь
перевести байты в килобайты, а их не столько же, сколько граммов в килограмме, и даже не
столько, сколько блинов у меня на столе&hellip; Хм, похоже мне пора перекусить&hellip;



Archiver (13)

Давай наконец попробуем нормально реализовать метод execute() класса ZipCreateCommand, который
мы добавляли раньше. Для этого нужно:
1.	В начале метода добавить вывод сообщения &quot;Создание архива.&quot; Не забудь, что мы работаем с
консолью через методы класса ConsoleHelper.
2.	Создай новый объект класса ZipFileManager. Т.к. создание этого объекта будет необходимо и
другим командам, вынеси создание в отдельный метод ZipFileManager getZipFileManager() throws
Exception в класс ZipCommand. Этот метод должен:
2.1. Просить пользователя ввести полный путь файла архива
2.2. Считывать введенный путь в переменную типа String
2.3. Используя введенный String формировать путь Path
2.4. Создать объект ZipFileManager, передав в конструктор полученный путь
2.5. Вернуть созданный объект
3.	Попроси пользователя ввести полное имя файла или директории для архивации
4.	Создай путь Path, используя введенную строку
5.	У объекта класса ZipFileManager вызови метод createZip(), передав в него путь из п.4
6.	Выведи в консоль сообщение &quot;Архив создан.&quot;
7.	Оберни содержимое метода execute() класса ZipCreateCommand в блок try-catch и отлавливай
исключение типа PathIsNotFoundException. Если оно произошло, выведи сообщение &quot;Вы неверно
указали имя файла или директории.&quot;
8.	Запусти программу и проверь, что команда &quot;упаковать файлы в архив&quot; работает



Archiver (13)

Пришло время отрефакторить класс ZipFileManager. В методе createZip есть код, который нам также
понадобится в методах, которые будут добавлять или удалять файл в архив, распаковывать его и т.д. Эти
методы мы будем реализовывать позже, но уже сейчас можем вынести общие части кода в отдельные
методы.
Кроме того, метод createZip мог создавать архив только из одного файла, а хотелось бы уметь
архивировать всю папку целиком. Создавать отдельный метод для этого не будем, т.к. в createZip(Path
source) можно передавать и директорию и обычный файл.
Задания на сегодня:
1.	Реализуй приватный метод void addNewZipEntry(ZipOutputStream zipOutputStream, Path filePath,
Path fileName) throws Exception в классе ZipFileManager. Он должен:
1.1. Создавать InputStream, для файла с именем fileName, расположенным в
директории filePath
1.2. Создавать новый элемент архива ZipEntry, в качестве имени используй fileName,
преобразовав его в String
1.3. Добавить в переданный zipOutputStream новый элемент архива ZipEntry (из п.1.2)
1.4. Копировать данные из InputStream (из п.1.1) в переданный zipOutputStream
1.5. Закрывать в zipOutputStream элемент архива ZipEntry (из п.1.2)
1.6. Закрывать InputStream, сделай это с помощью try-with-resources
2.	Замени часть кода метода createZip вызовом нового метода addNewZipEntry(). Передай значение
source.getParent() в параметр filePath, а source.getFileName() в filename.
3.	Реализуй приватный метод void copyData(InputStream in, OutputStream out) throws Exception. Он
должен читать данные из in и записывать в out, пока не вычитает все.
4.	Замени часть кода метода addNewZipEntry на вызов метода copyData
5.	Вернемся к createZip:
5.1. В начале метода проверь, что существует директория (zipFile.getParent()), в которой мы
будем создавать zipFile, если ее нет, то создай ее.
5.2. Если source является обычным файлом (для проверки используй Files.isRegularFile), то оставим просто вызов
addNewZipEntry
5.3. Если source является директорией (для проверки используй Files.isDirectory), то:
5.3.1.	Создай объект класса файловый менеджер FileManager, в конструктор передадим
source
5.3.2.	Получи список файлов у файлового менеджера, сохраним его в переменную
fileNames
5.3.3.	Для всех элементов fileNames, вызови метод addNewZipEntry(zipOutputStream,
source, fileName)
5.4. Если source не является ни папкой, ни файлом, то кинь исключение
PathIsNotFoundException.



Archiver (13)

Теперь займемся другой, не менее важной частью нашего архиватора. Очень часто пользователь хочет
создать архив не из одного файла, а из целой папки. Тогда архивация сводится к поочередному
добавлению элемента ZipEntry для каждого файла в архив.
Нам нужно написать класс FileManager для получения списка всех файлов в какой-то папке. У него должен
быть конструктор, который будет принимать путь Path rootPath, указывающий на корень (папку, файлы в
которой нас интересуют) и метод List&lt;Path&gt; getFileList(), который должен возвращать список
относительных путей всех файлов, которые находятся по пути rootPath, включая файлы в подпапках.
Директория, в которой будем искать, может задаваться только один раз в конструкторе. Поэтому, прямо в
конструкторе мы сразу можем сформировать список файлов (их относительных путей), сохранив его в
переменную класса List&lt;Path&gt; fileList.
Осталось только решить, как нам собрать все файлы, даже те, которые могут быть в папке, которая в папке,
которая в папке, которая в интересующей нас папке. Фух, чуть не вошел рекурсию. Хотя нам-то она и
поможет! Сделаем метод collectFileList(Path path), который будет складывать в переменную класса fileList
все файлы, обнаруженные внутри переданного пути path, вызывая сам себя для всех объектов, в
обнаруженных директориях.
1.	Создай класс FileManager с конструктором FileManager(Path rootPath) throws IOException
2.	Объяви и проинициализируй приватные переменные класса:
2.1. Path rootPath &ndash; корневой путь директории, файлы которой нас интересуют
2.2. List&lt;Path&gt; fileList &ndash; список относительных путей файлов внутри rootPath
3.	Создай геттер для fileList
4.	Реализуй метод void collectFileList(Path path) throws IOException, который должен:
4.1. Проверить, если переданный путь path является обычным файлом (используй метод
Files.isRegularFile), то получить его относительный путь относительно rootPath
и добавить его в список fileList.
4.2. Если переданный путь path, является директорией (узнать это поможет метод
Files.isDirectory), то пройтись по всему содержимому директории и вызвать
collectFileList(Path path), передав в path обнаруженные элементы.
Пройтись по всему содержимому директории можно предварительно получив DirectoryStream с помощью метода
newDirectoryStream класса Files. Не забудь закрыть созданный DirectoryStream.
5.	Добавь вызов метода collectFileList(rootPath) в конструкторе FileManager.
6.	Примени все свои знания об инкапсуляции к этому классу.
Выполняя это задание, ты написал алгоритм, который обходит дерево файлов. Но в Java есть специальный интерфейс
FileVisitor для этих целей. Очень рекомендую разобраться как им пользоваться.



Archiver (13)

Чтобы узнать какую команду сейчас хочет выполнить пользователь, добавим метод Operation
askOperation() в класс Archiver. Этот метод должен вывести в консоль список доступных команд и
попросить выбрать одну из них. Для удобства будем просить ввести номер команды, где номер &ndash; это
порядковый номер команды в enum Operation. Получить порядковый номер значения в enum&rsquo;е можно с
помощью метода ordinal().
Теперь все готово чтобы переписать main, используя последние достижения науки и техники, а именно
класс CommandExecutor и метод askOperation().
1.	Добавь публичный статический метод Operation askOperation() throws IOException в класс Archiver.
Он должен:
1.1. Использовать методы класса ConsoleHelper
1.2. Запрашивать у пользователя номер операции, которую он хочет совершить. Подсказка:
чтобы вывести номер операции &laquo;Создать архив&raquo;, используй: Operation.CREATE.ordinal()
1.3. Возвращать выбранную операцию.
Пример вывода метода askOperation():
Выберите операцию:
0 - упаковать файлы в архив
1 - добавить файл в архив
2 - удалить файл из архива
3 - распаковать архив
4 - просмотреть содержимое архива
5 &ndash; выход
2.	Перепиши метод main():
2.1. Объяви локальную переменную типа Operation
2.2. В цикле запрашивай новое значение для переменной п.2.1. с помощью метода askOperation() и
вызывай выполнение операции с помощью CommandExecutor.execute()
2.3. Обеспечь выход из цикла, если пользователь выбрал операцию Operation.EXIT
2.4. Оберни вызов askOperation() и execute(operation) в блок try-catch. Если произойдет
исключение WrongZipFileException выведи сообщение &quot;Вы не выбрали файл архива или
выбрали неверный файл.&quot; с помощью ConsoleHelper, при любых других исключениях
выводи &quot;Произошла ошибка. Проверьте введенные данные.&quot;.
2.5. Проследи, чтобы программа продолжила свою работу (перешла на новый шаг цикла),
после обработки исключений.
3.	Запусти программу и проверь, что команда &ldquo;выход&rdquo; работает.



