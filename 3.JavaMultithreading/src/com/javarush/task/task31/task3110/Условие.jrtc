taskKey="com.javarush.task.task31.task3110.big07"\n\nArchiver (7)

Мы много всего сделали и можно немного передохнуть.
Создадим, пакет exception и добавим в него два класса PathIsNotFoundException и WrongZipFileException.
Исключение PathIsNotFoundException будем кидать, если не сможем найти путь, в который нужно
распаковать архив, или путь к файлу, который хотим запаковать, или любой другой путь. Исключение
WrongZipFileException будем кидать, если будет попытка сделать что-нибудь с архивом, который не
существует.
1.	Создай пакет exception
2.	Добавь в него класс PathIsNotFoundException унаследованный от Exception
3.	Добавь класс WrongZipFileException, также унаследованный от Exception


Требования:
1.	В пакете exception должен быть создан класс PathIsNotFoundException унаследованный от Exception.
2.	В пакете exception должен быть создан класс WrongZipFileException унаследованный от Exception.


Archiver (7)

Представь, что пользователь сообщает нам с помощью переменной Operation operation, что он хочет
сделать. Тогда мы должны проверить значение этой переменной, создать объект соответствующего
класса команды и вызвать у него метод execute(). Чтобы не создавать объект класса нужной команды
каждый раз, его нужно где-то хранить. Создадим для этих целей класс CommandExecutor, пусть у него
будет открытым только один публичный статический метод execute(Operation operation), который найдет
нужную команду и вызовет у нее метод execute.
1.	Создай класс CommandExecutor. Он должен быть в корне задачи, не стоит добавлять его в пакет command
2.	Запрети явный вызов конструктора этого класса
3.	Добавь в класс приватное статическое константное хранилище команд Map&lt;Operation, Command&gt;
ALL_KNOWN_COMMANDS_MAP = new HashMap&lt;&gt;()
4.	Добавь в хранилище ALL_KNOWN_COMMANDS_MAP все значения Operation так, чтобы каждому значению соответствовала правильная команда.
Поскольку хранилище создается один раз, то добавление значений лучше сделать в статическом блоке инициализации.
5.	Реализуй публичный статический метод execute(Operation operation) throws Exception, который
должен брать нужную команду из ALL_KNOWN_COMMANDS_MAP и вызывать у нее метод execute.
Догадался ты или нет, но ты только что реализовал паттерн Команда!



Archiver (7)

Разделим команды на два типа: те, которые работают непосредственно с архивом и вспомогательные
(например EXIT). Все команды первого типа, будут иметь общий функционал, его удобно вынести в какой-
то их общий базовый класс. Назовем этот класс ZipCommand. Он, как и все классы команд, должен
реализовывать интерфейс Command. Все команды, которые работают с архивом, должны быть
унаследованы от класса ZipCommand. Мы не будем создавать объекты класса ZipCommand, поэтому
сделаем его абстрактным.
1.	Создай абстрактный класс ZipCommand, реализующий интерфейс Command
2.	Создай по одному классу для каждой команды. Все перечисленные команды должны быть
унаследованы от ZipCommand и содержать пустую реализацию метода execute(), его реализацию
мы будем писать для каждой команды отдельно по мере реализации нашего архиватора.
2.1. Команда создания архива (упаковки файлов в архив) &ndash; class ZipCreateCommand
2.2. Команда просмотра содержимого архива &ndash; class ZipContentCommand
2.3. Команда распаковки архива &ndash; class ZipExtractCommand
2.4. Команда добавления файла в архив &ndash; class ZipAddCommand
2.5. Команда удаления файла из архива &ndash; class ZipRemoveCommand



Archiver (7)

Каждая команда подразумевает выполнение каких-то действий. Создадим интерфейс Command, с
методом execute() (execute &ndash; &laquo;выполнить&raquo; по-английски).  Для каждой команды мы создадим свой
собственный класс. Все классы команд должны реализовывать (быть унаследованы) интерфейс Command.
Так как команд будет много, отведем для них отдельный пакет command. Все интерфейсы и реализации
команд будем хранить именно в нем.
Самая простая команда - это выход EXIT, с нее и начнем.
1.	Создай пакет command
2.	В нем объявить интерфейс Command
3.	Добавь метод void execute() throws Exception в интерфейс Command
4.	Объяви класс ExitCommand, реализующий интерфейс Command
5.	Реализуй метод execute() в классе ExitCommand, он должен выводить &ldquo;До встречи!&rdquo; с помощью
метода из класса ConsoleHelper
6.	В самом конце метода main в класса Archiver добавь код, который создает объект типа
ExitCommand и вызывает у него метод execute()
7.	Попробуй, как это все работает
Обрати внимание, что все файлы проекта должны быть в кодировке UTF-8. Кодировку в IntelliJ IDEA можно задать
через пункты меню Settings -&gt; Editor -&gt; File Encodings. Проверь, что все три поля отвечающие за кодировку
выставлены в UTF-8.



Archiver (7)

Как видишь, архивировать оказалось не так уж и сложно. Но наш архиватор получился каким-то уж
слишком примитивным. Настоящий архиватор должен уметь гораздо больше: распаковку архива,
добавление нового файла в существующий архив, удаление файла из архива, просмотр содержимого
архива. Сейчас мы будем улучшать наш архиватор. А для этого придется написать несколько новых
классов. Сначала давай создадим enum Operation, который будет содержать все команды, которые
поддерживает наш архиватор.
Так же было бы удобно использовать ConsoleHelper для работы с консолью, чтобы все что касается
консоли было собрано в одном классе. В дальнейшем, если не указано обратного, то весь ввод и вывод
должен происходить через ConsoleHelper.
1.	Объяви enum Operation, в него добавить команды:
1.1. Создать архив CREATE
1.2. Добавить файл в архив ADD
1.3. Удалить файл из архива REMOVE
1.4. Извлечь содержимое архива EXTRACT
1.5. Просмотреть содержимое архива CONTENT
1.6. Выйти из программы EXIT
2.	Создай класс ConsoleHelper и реализуй в нем статические публичные методы:
2.1. Вывести сообщение в консоль void writeMessage(String message)
2.2. Прочитать строку с консоли String readString()
2.3. Прочитать число с консоли int readInt()
Методы чтения с консоли могут бросать исключение IOException в случае ошибки ввода, учти
это при их объявлении.



Archiver (7)

Сейчас мы напишем реализацию метода createZip(Path source), в котором мы будем архивировать файл,
заданный переменной source.
В Java есть специальный класс ZipOutputStream из пакета java.util.zip, который сжимает (архивирует)
переданные в него данные. Чтобы несколько файлов, сжимаемые в один архив, не слиплись вместе, для
каждого из них создается специальная сущность &ndash; элемент архива ZipEntry. Т.е. в ZipOutputStream мы
сначала кладем ZipEntry, а затем уже записываем содержимое файла. При записи файл автоматически
сжимается, а при чтении &ndash; автоматически восстанавливается. ZipEntry может быть не только файлом, но и
папкой.
Чтобы заархивировать файл (создать новый архив и добавить в него файл):
1.	Создай новый поток архива ZipOutputStream используя переменную класса zipFile, с помощью метода
newOutputStream класса Files.
2.	Создай новый элемент архива ZipEntry. В конструктор ZipEntry передай строку, содержащую имя новой записи.
Имя нужно получить из полного пути source, взять только имя файла и сконвертировать его в String.
3.	Добавь в поток архива созданный элемент архива.
4.	Перепиши данные из файла, который архивируем в поток архива. Для этого:
4.1. Создай поток InputStream для добавляемого файла source, используя метод newInputStream класса Files
4.2. Сделай цикл, который будет читать данные из InputStream (созданного в п.4.1), пока они там есть и записывать
их в ZipOutputStream (созданный в п.1)
4.3. Закрой InputStream, сделай это с помощью try-with-resources
5.	Закрой элемент архива у потока архива
6.	Закрой поток архива, сделай это также с помощью try-with-resources
7.	Запусти программу и проверь, что файл архивируется



