taskKey="com.javarush.task.task31.task3110.big02"\n\nArchiver (2)

Сейчас мы напишем реализацию метода createZip(Path source), в котором мы будем архивировать файл,
заданный переменной source.
В Java есть специальный класс ZipOutputStream из пакета java.util.zip, который сжимает (архивирует)
переданные в него данные. Чтобы несколько файлов, сжимаемые в один архив, не слиплись вместе, для
каждого из них создается специальная сущность &ndash; элемент архива ZipEntry. Т.е. в ZipOutputStream мы
сначала кладем ZipEntry, а затем уже записываем содержимое файла. При записи файл автоматически
сжимается, а при чтении &ndash; автоматически восстанавливается. ZipEntry может быть не только файлом, но и
папкой.
Чтобы заархивировать файл (создать новый архив и добавить в него файл):
1.	Создай новый поток архива ZipOutputStream используя переменную класса zipFile, с помощью метода
newOutputStream класса Files.
2.	Создай новый элемент архива ZipEntry. В конструктор ZipEntry передай строку, содержащую имя новой записи.
Имя нужно получить из полного пути source, взять только имя файла и сконвертировать его в String.
3.	Добавь в поток архива созданный элемент архива.
4.	Перепиши данные из файла, который архивируем в поток архива. Для этого:
4.1. Создай поток InputStream для добавляемого файла source, используя метод newInputStream класса Files
4.2. Сделай цикл, который будет читать данные из InputStream (созданного в п.4.1), пока они там есть и записывать
их в ZipOutputStream (созданный в п.1)
4.3. Закрой InputStream, сделай это с помощью try-with-resources
5.	Закрой элемент архива у потока архива
6.	Закрой поток архива, сделай это также с помощью try-with-resources
7.	Запусти программу и проверь, что файл архивируется


Требования:
1.	Метод createZip должен создавать ZipOutputStream используя поле zipFile и метод Files.newOutputStream.
2.	Метод createZip должен создавать элемент архива ZipEntry c именем файла, полученным из параметра source.
3.	Созданный ZipEntry нужно добавить в ZipOutputStream.
4.	Для переменной source должен быть создан InputStream с помощью метода Files.newInputStream.
5.	Данные из InputStream нужно переписать в ZipOutputStream.
6.	Закрой текущий Entry у объекта ZipOutputStream.
7.	InputStream для source должен быть закрыт.
8.	ZipOutputStream должен быть закрыт.


Archiver (2)

Давай напишем архиватор. Архиватор, как минимум, должен уметь архивировать и разархивировать
файлы. Начнем с первого.
Нам потребуется менеджер архива. Он будет совершать операции над файлом архива (файлом, который
будет храниться на диске и иметь расширение zip). Класс, который будет этим заниматься, назовем
ZipFileManager. А главный класс приложения &ldquo;Архиватор&rdquo; будет называться Archiver.
В программировании и не только, есть понятие полного (абсолютного) и относительного пути. Для начала,
разберемся что-же такое путь вообще. Путь (англ. Path) &ndash; это набор символов, который показывает, где в
операционной системе находится какой-то файл или папка.
Полный или абсолютный путь &ndash; это путь, начинающийся с корневой директории. В операционной системе
Windows, корневой директорией принято считать диск. Пример полного пути в Windows:
C:/user/zips/Test1.zip.
Относительный путь &ndash; это путь относительно какой-то директории. zips/Test1.zip  - это пример
относительного пути файла Test1.zip относительно директории (папки) C:/user. Относительный путь,
относительно директории C:/user/zips будет просто Test1.zip и совпадать с именем файла.
Обрати внимание, что по умолчанию, и полный, и относительный путь к файлу, включают в себя имя
файла.
1.	Создай класс менеджер ZipFileManager
2.	Добавь в класс приватную переменную Path zipFile. В ней мы будем хранить полный путь к архиву,
с которым будем работать.
3.	Добавь конструктор ZipFileManager(Path zipFile). Проинициализируй поле класса zipFile.
4.	Объяви публичный метод createZip(Path source) throws Exception, пока с пустой реализацией.
Path source &ndash; это путь к чему-то, что мы будем архивировать.
5.	Создай класс Archiver и добавь в него метод main.
6.	В методе main:
6.1 Запроси пользователя ввести полный путь архива с клавиатуры. Не забудь, что имя тоже
входит в состав полного пути.
6.2 Создай объект класса ZipFileManager, передав в него имя файла архива. Разберись, как из
String получить Path. Подсказка: изучи метод get() класса Paths.
6.3 Запроси пользователя ввести путь к файлу, который будем архивировать. Не путай это с
файлом архива, который мы уже ввели. На этот раз нам нужен файл, который мы будем
сжимать, а не в котором хранить сжатые данные.
6.4 Вызови метод createZip у объекта ZipFileManager, передав в него путь для архивации.



