taskKey="com.javarush.task.task29.task2909.big10"\n\nРефакторинг (10)

Разберись с кодом в пакете car (машина).
10.1.	Замена конструктора фабричным методом.
10.1.1.	Объяви классы Truck (грузовик), Sedan (седан) и Cabriolet (кабриолет), унаследованные от Car.
10.1.2.	Добавь в них конструкторы, принимающие int numberOfPassengers.
10.1.3.	Добавь фабричный статический метод Car create(int type, int numberOfPassengers) в класс Car и реализуй его.
10.1.4.	Измени область видимости конструктора класса Car.


Требования:
1.	Нужно создать классы Truck (грузовик), Sedan (седан) и Cabriolet (кабриолет), унаследованные от Car.
2.	Необходимо в созданные классы добавить конструкторы, принимающие int numberOfPassengers.
3.	Необходимо создать фабричный статический метод Car create(int type, int numberOfPassengers) в классе Car и реализовать его.
4.	Необходимо изменить область видимости конструктора класса Car с public на protected.


Рефакторинг (10)

9.1.	Самоинкапсуляция поля. Перепиши метод incAverageGrade() используя сеттер и геттер для доступа к averageGrade.
9.2.	Замена поля-массива объектом. Замени массив int[] size объектом нового типа Size,
содержащим публичные поля: рост int height и вес int weight. Публичный класс Size объяви
внутри класса Human.
9.3.	Инкапсуляция поля. Сокрой поле company в классе Worker. Добавь сеттер и геттер для него.
9.4.	Замена кодирования типа классом.
9.4.1.	Объяви публичный класс группы крови BloodGroup внутри пакета human.
9.4.2.	Добавь в класс BloodGroup приватное константное поле int code, приватный конструктор,
принимающий int и инициализирующий поле code, геттер для поля класса.
9.4.3.	Добавь в класс BloodGroup статические методы first(), second(), third() и fourth(),
создающие и возвращающие объекты типа BloodGroup с правильным кодом внутри (1, 2, 3 и 4 соответственно).
9.4.4.	Примени в классе Human новый тип BloodGroup.



Рефакторинг (10)

8.1.	Удаление сеттера. Удали метод setId(). Поле id должно устанавливаться только в момент
создания объекта.
8.2.	Сокрытие метода (поля). Изменить область видимости поля nextId в соответствии с
областью его использования.
8.3.	Замена исключения проверкой условия. Перепиши метод removeStudent(int index), чтобы
он удалял студента из списка студентов только, если он там есть. Метод не должен кидать
исключение.
8.4.	Удаление управляющего флага. Перепиши метод findDimaOrSasha(), сохранив логику его
работы. В методе не должны использоваться флаги типа found, воспользуйся оператором
break.



Рефакторинг (10)

7.1.	Параметризация метода. Замени методы incAverageGradeBy01() и incAverageGradeBy02()
одним методом incAverageGrade(double delta).
7.2.	Передача всего объекта. Перепиши метод addInfoAboutStudent(), чтобы он в качестве
параметра принимал объект типа Student.
7.3.	Замена параметра вызовом метода. Перепиши метод printInfoAboutStudent(), чтобы он не
требовал в качестве параметра имя студента, а получал его, вызвав соответствующий
метод у переданного объекта.
7.4.	Замена параметров объектом. Перепиши методы setBeginningOfSession и setEndOfSession,
чтобы они вместо набора параметров принимали по одному объекту даты.



Рефакторинг (10)

6.1.	Замена параметра набором специализированных методов. Замени метод setValue() класса
Student специализированными методами setCourse и setAverageGrade.
6.2.	Добавление параметра. Добавить параметр с типом double в метод
getStudentWithAverageGrade(), чтобы было понятно с каким средним балом нужен студент.
Реализуй метод getStudentWithAverageGrade().
6.3.	Удаление параметра. Убери параметр из метода getStudentWithMaxAverageGrade().
Реализуй этот метод, он должен возвращать студента с максимальным средним балом.
6.4.	Разделение запроса и модификатора. Раздели метод
getStudentWithMinAverageGradeAndExpel на Student getStudentWithMinAverageGrade() и
void expel(Student student). Первый метод должен возвратить студента с
минимальным средним балом, а второй - отчислить переданного студента (удалять из
списка students).



Рефакторинг (10)

5.1.	Создание шаблонного метода.
5.1.1.	Добавь в класс Human метод String getPosition(), который должен возвращать строку &quot;Человек&quot;.
5.1.2.	Переопредели этот метод в классе Student и Teacher. Метод должен возвращать &quot;Студент&quot; и &quot;Преподаватель&quot; соответственно.
5.1.3.	Замени метод printData в подклассах шаблонным методом в базовом классе, использующим getPosition().
5.2.	Замена делегирования наследованием. Класс Worker должен наследоваться от Human, а не содержать его.
5.3.	Переименование метода. Переименуй метод setSlr, чтобы было понятно сеттером чего является этот метод.



