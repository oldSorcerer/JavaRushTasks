taskKey="com.javarush.task.task29.task2909.big09"\n\nРефакторинг (9)

9.1.	Самоинкапсуляция поля. Перепиши метод incAverageGrade() используя сеттер и геттер для доступа к averageGrade.
9.2.	Замена поля-массива объектом. Замени массив int[] size объектом нового типа Size,
содержащим публичные поля: рост int height и вес int weight. Публичный класс Size объяви
внутри класса Human.
9.3.	Инкапсуляция поля. Сокрой поле company в классе Worker. Добавь сеттер и геттер для него.
9.4.	Замена кодирования типа классом.
9.4.1.	Объяви публичный класс группы крови BloodGroup внутри пакета human.
9.4.2.	Добавь в класс BloodGroup приватное константное поле int code, приватный конструктор,
принимающий int и инициализирующий поле code, геттер для поля класса.
9.4.3.	Добавь в класс BloodGroup статические методы first(), second(), third() и fourth(),
создающие и возвращающие объекты типа BloodGroup с правильным кодом внутри (1, 2, 3 и 4 соответственно).
9.4.4.	Примени в классе Human новый тип BloodGroup.


Требования:
1.	Необходимо изменить метод incAverageGrade() класса Student с использованием сеттера и геттера для доступа к averageGrade.
2.	Необходимо заменить массив int[] size класса Human объектом нового типа Size.
3.	Необходимо изменить модификатор доступа поля company в классе Worker на приватный. Необходимо добавить сеттер и геттер для этого поля.
4.	Необходимо создать публичный класс BloodGroup в пакете human.
5.	Необходимо добавить в класс BloodGroup константное поле int code, приватный конструктор, принимающий int и инициализирующий поле code, геттер для поля класса.
6.	Необходимо добавить в класс BloodGroup статические методы first(), second(), third() и fourth(), создающие и возвращающие объекты типа BloodGroup с правильным кодом внутри (1, 2, 3 и 4 соответственно).
7.	Необходимо изменить тип поля bloodGroup класса Human на BloodGroup, обновить сеттер и геттер.
8.	Необходимо удалить из класса Human константы: FIRST, SECOND, THIRD, FOURTH.


Рефакторинг (9)

8.1.	Удаление сеттера. Удали метод setId(). Поле id должно устанавливаться только в момент
создания объекта.
8.2.	Сокрытие метода (поля). Изменить область видимости поля nextId в соответствии с
областью его использования.
8.3.	Замена исключения проверкой условия. Перепиши метод removeStudent(int index), чтобы
он удалял студента из списка студентов только, если он там есть. Метод не должен кидать
исключение.
8.4.	Удаление управляющего флага. Перепиши метод findDimaOrSasha(), сохранив логику его
работы. В методе не должны использоваться флаги типа found, воспользуйся оператором
break.



Рефакторинг (9)

7.1.	Параметризация метода. Замени методы incAverageGradeBy01() и incAverageGradeBy02()
одним методом incAverageGrade(double delta).
7.2.	Передача всего объекта. Перепиши метод addInfoAboutStudent(), чтобы он в качестве
параметра принимал объект типа Student.
7.3.	Замена параметра вызовом метода. Перепиши метод printInfoAboutStudent(), чтобы он не
требовал в качестве параметра имя студента, а получал его, вызвав соответствующий
метод у переданного объекта.
7.4.	Замена параметров объектом. Перепиши методы setBeginningOfSession и setEndOfSession,
чтобы они вместо набора параметров принимали по одному объекту даты.



Рефакторинг (9)

6.1.	Замена параметра набором специализированных методов. Замени метод setValue() класса
Student специализированными методами setCourse и setAverageGrade.
6.2.	Добавление параметра. Добавить параметр с типом double в метод
getStudentWithAverageGrade(), чтобы было понятно с каким средним балом нужен студент.
Реализуй метод getStudentWithAverageGrade().
6.3.	Удаление параметра. Убери параметр из метода getStudentWithMaxAverageGrade().
Реализуй этот метод, он должен возвращать студента с максимальным средним балом.
6.4.	Разделение запроса и модификатора. Раздели метод
getStudentWithMinAverageGradeAndExpel на Student getStudentWithMinAverageGrade() и
void expel(Student student). Первый метод должен возвратить студента с
минимальным средним балом, а второй - отчислить переданного студента (удалять из
списка students).



Рефакторинг (9)

5.1.	Создание шаблонного метода.
5.1.1.	Добавь в класс Human метод String getPosition(), который должен возвращать строку &quot;Человек&quot;.
5.1.2.	Переопредели этот метод в классе Student и Teacher. Метод должен возвращать &quot;Студент&quot; и &quot;Преподаватель&quot; соответственно.
5.1.3.	Замени метод printData в подклассах шаблонным методом в базовом классе, использующим getPosition().
5.2.	Замена делегирования наследованием. Класс Worker должен наследоваться от Human, а не содержать его.
5.3.	Переименование метода. Переименуй метод setSlr, чтобы было понятно сеттером чего является этот метод.



Рефакторинг (9)

4.1.	Замена наследования делегированием.
4.1.1.	Класс University не должен наследоваться от Student.
4.1.2.	Класс University должен содержать список students. Не забудь его инициализировать.
4.1.3.	Добавь сеттер и геттер для students.
4.1.4.	Университет имеет название (name) и возраст (age). Добавь необходимые поля, сеттеры и геттеры для них.
4.2.	Извлечение суперкласса.
4.2.1.	Создай класс UniversityPerson в пакете human.
4.2.2.	Перенеси в него поле university.
4.2.3.	Перенеси сеттер и геттер для поля university.
4.2.4.	Унаследуй необходимые классы от UniversityPerson.
4.3.	Замена простого поля объектом. Измени тип поля university на University.



