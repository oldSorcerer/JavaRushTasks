taskKey="com.javarush.task.task30.task3008.big12"\n\nЧат (12)

Приступим к написанию клиента. Клиент, в начале своей работы, должен запросить у
пользователя адрес и порт сервера, подсоединиться к указанному адресу, получить запрос
имени от сервера, спросить имя у пользователя, отправить имя пользователя серверу,
дождаться принятия имени сервером. После этого клиент может обмениваться текстовыми
сообщениями с сервером. Обмен сообщениями будет происходить в двух параллельно
работающих потоках. Один будет заниматься чтением из консоли и отправкой
прочитанного серверу, а второй поток будет получать данные от сервера и выводить их в
консоль.

Начнем реализацию клиента:
1)	Создай пакет client. В дальнейшем все классы, отвечающие за реализацию
клиентов, создавай в этом пакете.
2)	Создай класс Client.
3)	Создай внутренний класс SocketThread унаследованный от Thread в классе
Client. Он будет отвечать за поток, устанавливающий сокетное соединение и
читающий сообщения сервера. Класс должен иметь публичный модификатор доступа.
4)	Создай поле Connection connection в классе Client. Используй модификатор
доступа, который позволит обращаться к этому полю из класса потомков, но запретит
обращение из других классов вне пакета.
5)	Добавь приватное поле-флаг boolean clientConnected в класс Client. Проинициализируй его
значением false. В дальнейшем оно будет устанавливаться в true, если клиент
подсоединен к серверу или в false в противном случае. При объявлении этого поля
используй ключевое слово, которое позволит гарантировать что каждый поток,
использующий поле clientConnected, работает с актуальным, а не кэшированным его
значением.


Требования:
1.	Класс Client должен быть создан в пакете client.
2.	В классе Client должен быть создан публичный класс SocketThread унаследованный от Thread.
3.	В классе Client должно быть создано protected поле connection типа Connection.
4.	В классе Client должно быть создано private volatile поле clientConnected типа boolean.


Чат (12)

Пришло время написать главный метод класса Handler, который будет вызывать все
вспомогательные методы, написанные ранее. Реализуем метод void run() в классе Handler.

Он должен:
1) Выводить сообщение, что установлено новое соединение с удаленным
адресом, который можно получить с помощью метода getRemoteSocketAddress().
2) Создавать Connection, используя поле socket.
3) Вызывать метод, реализующий рукопожатие с клиентом, сохраняя имя нового
клиента.
4) Рассылать всем участникам чата информацию об имени присоединившегося
участника (сообщение с типом USER_ADDED). Подумай, какой метод подойдет для
этого лучше всего.
5) Сообщать новому участнику о существующих участниках.
6) Запускать главный цикл обработки сообщений сервером.
7) Обеспечить закрытие соединения при возникновении исключения.
8) Отловить все исключения типа IOException и ClassNotFoundException, вывести в
консоль информацию, что произошла ошибка при обмене данными с удаленным
адресом.
9) После того как все исключения обработаны, если п.11.3 отработал и возвратил
нам имя, мы должны удалить запись для этого имени из connectionMap и разослать
всем остальным участникам сообщение с типом USER_REMOVED и сохраненным
именем.
10) Последнее, что нужно сделать в методе run() &ndash; вывести сообщение,
информирующее что соединение с удаленным адресом закрыто.

Наш сервер полностью готов. Попробуй его запустить.



Чат (12)

Этап третий &ndash; главный цикл обработки сообщений сервером.
Добавь приватный метод void serverMainLoop(Connection connection, String userName) throws
IOException, ClassNotFoundException, где значение параметров такое же, как и у метода
notifyUsers().

Он должен:
1) Принимать сообщение клиента
2) Если принятое сообщение &ndash; это текст (тип TEXT), то формировать новое
текстовое сообщение путем конкатенации: имени клиента, двоеточия, пробела и
текста сообщения. Например, если мы получили сообщение с текстом &quot;привет чат&quot; от
пользователя &quot;Боб&quot;, то нужно сформировать сообщение &quot;Боб: привет чат&quot;.
3) Отправлять сформированное сообщение всем клиентам с помощью метода
sendBroadcastMessage().
4) Если принятое сообщение не является текстом, вывести сообщение об ошибке
5) Организовать бесконечный цикл, внутрь которого перенести функционал
пунктов 10.1-10.4.



Чат (12)

Этап второй, но не менее важный &ndash; отправка клиенту (новому участнику) информации об остальных клиентах (участниках) чата.

Для этого добавь приватный метод void notifyUsers(Connection connection, String userName) throws IOException,
где connection &ndash; соединение с участником, которому будем слать информацию, а userName &ndash; его имя.
Метод должен:
1) Пройтись по connectionMap.
2) У каждого элемента из п.1 получить имя клиента, сформировать команду с типом USER_ADDED и полученным именем.
3) Отправить сформированную команду через connection.
4) Команду с типом USER_ADDED и именем равным userName отправлять не нужно, пользователь и так имеет информацию о себе.



Чат (12)

Класс Handler должен реализовывать протокол общения с клиентом.
Выделим из протокола отдельные этапы и реализуем их с помощью отдельных методов:
Этап первый &ndash; это этап рукопожатия (знакомства сервера с клиентом). Реализуем его с
помощью приватного метода String serverHandshake(Connection connection) throws IOException,
ClassNotFoundException. Метод в качестве параметра принимает соединение connection, а
возвращает имя нового клиента.

Реализация метода должна:
1)	Сформировать и отправить команду запроса имени пользователя
2)	Получить ответ клиента
3)	Проверить, что получена команда с именем пользователя
4)	Достать из ответа имя, проверить, что оно не пустое и пользователь с таким именем
еще не подключен (используй connectionMap)
5)	Добавить нового пользователя и соединение с ним в connectionMap
6)	Отправить клиенту команду информирующую, что его имя принято
7)	Если какая-то проверка не прошла, заново запросить имя клиента
8)	Вернуть принятое имя в качестве возвращаемого значения



Чат (12)

Т.к. сервер может одновременно работать с несколькими клиентами, нам понадобится
метод для отправки сообщения сразу всем.

Добавь в класс Server:
1)	Статическое поле Map&lt;String, Connection&gt; connectionMap, где ключом будет имя
клиента, а значением - соединение с ним.
2)	Инициализацию поля из п.7.1 с помощью подходящего Map из библиотеки
java.util.concurrent, т.к. работа с этим полем будет происходить из разных потоков и
нужно обеспечить потокобезопасность.
3)	Статический метод void sendBroadcastMessage(Message message), который должен
отправлять сообщение  message всем соединениям из connectionMap. Если при
отправке сообщение произойдет исключение IOException, нужно отловить его и
сообщить пользователю, что не смогли отправить сообщение.



