taskKey="com.javarush.task.task30.task3008.big14"\n\nЧат (14)

Приступим к написанию главного функционала класса Client.

1)	Добавь метод public void run(). Он должен создавать вспомогательный поток
SocketThread, ожидать пока тот установит соединение с сервером, а после этого
в цикле считывать сообщения с консоли и отправлять их серверу. Условием выхода
из цикла будет отключение клиента или ввод пользователем команды &#39;exit&#39;.
Для информирования главного потока, что соединение установлено во
вспомогательном потоке, используй методы wait() и notify() объекта класса Client.

Реализация метода run должна:
а)  Создавать новый сокетный поток с помощью метода getSocketThread().
б)	Помечать созданный поток как daemon, это нужно для того, чтобы при выходе
из программы вспомогательный поток прервался автоматически.
в)	Запустить вспомогательный поток.
г)	Заставить текущий поток ожидать, пока он не получит нотификацию из другого
потока. Подсказка: используй wait() и синхронизацию на уровне объекта. Если во
время ожидания возникнет исключение, сообщи об этом пользователю и выйди
из программы.
д)	После того, как поток дождался нотификации, проверь значение
clientConnected. Если оно true &ndash; выведи &quot;Соединение установлено. Для выхода
наберите команду &#39;exit&#39;.&quot;. Если оно false &ndash; выведи &quot;Произошла ошибка во время
работы клиента.&quot;.
е)	Считывай сообщения с консоли пока клиент подключен. Если будет введена
команда &#39;exit&#39;, то выйди из цикла.
ж)	После каждого считывания, если метод shouldSendTextFromConsole()
возвращает true, отправь считанный текст с помощью метода  sendTextMessage().

2)	Добавь метод public static void main(String[] args). Он должен создавать новый объект типа Client и
вызывать у него метод run().


Требования:
1.	Метод main() должен создавать новый объект типа Client и вызывать у него метод run().
2.	Метод run() должен создавать и запускать новый поток, полученный с помощью метода getSocketThread().
3.	Поток созданный с помощью метода getSocketThread() должен быть отмечен как демон (setDaemon(true)).
4.	После запуска нового socketThread метод run() должен ожидать до тех пор, пока не будет пробужден.
5.	До тех пор, пока флаг clientConnected равен true,с консоли должны считываться сообщения с помощью метода ConsoleHelper.readString().
6.	Если была введена команда &quot;exit&quot; цикл считывания сообщений должен быть прерван.
7.	Если метод shouldSentTextFromConsole() возвращает true, должен быть вызван метод sendTextMessage() со считанным текстом в качестве параметра.


Чат (14)

Продолжаем реализацию вспомогательных методов класса Client.

Добавь в класс методы, которые будут доступны классам потомкам,
но не доступны из других классов вне пакета:
1)	String getServerAddress() &ndash; должен запросить ввод адреса сервера у
пользователя и вернуть введенное значение. Адрес может быть строкой, содержащей
ip, если клиент и сервер запущен на разных машинах или &lsquo;localhost&rsquo;, если клиент и
сервер работают на одной машине.
2)	int getServerPort() &ndash; должен запрашивать ввод порта сервера и возвращать его.
3)	String getUserName() &ndash; должен запрашивать и возвращать имя пользователя.
4)	boolean shouldSendTextFromConsole() &ndash; в данной реализации клиента всегда
должен возвращать true (мы всегда отправляем текст введенный в консоль). Этот
метод может быть переопределен, если мы будем писать какой-нибудь другой
клиент, унаследованный от нашего, который не должен отправлять введенный в
консоль текст.
5)	SocketThread getSocketThread() &ndash; должен создавать и возвращать новый объект
класса SocketThread.
6)	void sendTextMessage(String text) &ndash; создает новое текстовое сообщение,
используя переданный текст и отправляет его серверу через соединение connection.
Если во время отправки произошло исключение IOException, то необходимо вывести
информацию об этом пользователю и присвоить false полю clientConnected.



Чат (14)

Приступим к написанию клиента. Клиент, в начале своей работы, должен запросить у
пользователя адрес и порт сервера, подсоединиться к указанному адресу, получить запрос
имени от сервера, спросить имя у пользователя, отправить имя пользователя серверу,
дождаться принятия имени сервером. После этого клиент может обмениваться текстовыми
сообщениями с сервером. Обмен сообщениями будет происходить в двух параллельно
работающих потоках. Один будет заниматься чтением из консоли и отправкой
прочитанного серверу, а второй поток будет получать данные от сервера и выводить их в
консоль.

Начнем реализацию клиента:
1)	Создай пакет client. В дальнейшем все классы, отвечающие за реализацию
клиентов, создавай в этом пакете.
2)	Создай класс Client.
3)	Создай внутренний класс SocketThread унаследованный от Thread в классе
Client. Он будет отвечать за поток, устанавливающий сокетное соединение и
читающий сообщения сервера. Класс должен иметь публичный модификатор доступа.
4)	Создай поле Connection connection в классе Client. Используй модификатор
доступа, который позволит обращаться к этому полю из класса потомков, но запретит
обращение из других классов вне пакета.
5)	Добавь приватное поле-флаг boolean clientConnected в класс Client. Проинициализируй его
значением false. В дальнейшем оно будет устанавливаться в true, если клиент
подсоединен к серверу или в false в противном случае. При объявлении этого поля
используй ключевое слово, которое позволит гарантировать что каждый поток,
использующий поле clientConnected, работает с актуальным, а не кэшированным его
значением.



Чат (14)

Пришло время написать главный метод класса Handler, который будет вызывать все
вспомогательные методы, написанные ранее. Реализуем метод void run() в классе Handler.

Он должен:
1) Выводить сообщение, что установлено новое соединение с удаленным
адресом, который можно получить с помощью метода getRemoteSocketAddress().
2) Создавать Connection, используя поле socket.
3) Вызывать метод, реализующий рукопожатие с клиентом, сохраняя имя нового
клиента.
4) Рассылать всем участникам чата информацию об имени присоединившегося
участника (сообщение с типом USER_ADDED). Подумай, какой метод подойдет для
этого лучше всего.
5) Сообщать новому участнику о существующих участниках.
6) Запускать главный цикл обработки сообщений сервером.
7) Обеспечить закрытие соединения при возникновении исключения.
8) Отловить все исключения типа IOException и ClassNotFoundException, вывести в
консоль информацию, что произошла ошибка при обмене данными с удаленным
адресом.
9) После того как все исключения обработаны, если п.11.3 отработал и возвратил
нам имя, мы должны удалить запись для этого имени из connectionMap и разослать
всем остальным участникам сообщение с типом USER_REMOVED и сохраненным
именем.
10) Последнее, что нужно сделать в методе run() &ndash; вывести сообщение,
информирующее что соединение с удаленным адресом закрыто.

Наш сервер полностью готов. Попробуй его запустить.



Чат (14)

Этап третий &ndash; главный цикл обработки сообщений сервером.
Добавь приватный метод void serverMainLoop(Connection connection, String userName) throws
IOException, ClassNotFoundException, где значение параметров такое же, как и у метода
notifyUsers().

Он должен:
1) Принимать сообщение клиента
2) Если принятое сообщение &ndash; это текст (тип TEXT), то формировать новое
текстовое сообщение путем конкатенации: имени клиента, двоеточия, пробела и
текста сообщения. Например, если мы получили сообщение с текстом &quot;привет чат&quot; от
пользователя &quot;Боб&quot;, то нужно сформировать сообщение &quot;Боб: привет чат&quot;.
3) Отправлять сформированное сообщение всем клиентам с помощью метода
sendBroadcastMessage().
4) Если принятое сообщение не является текстом, вывести сообщение об ошибке
5) Организовать бесконечный цикл, внутрь которого перенести функционал
пунктов 10.1-10.4.



Чат (14)

Этап второй, но не менее важный &ndash; отправка клиенту (новому участнику) информации об остальных клиентах (участниках) чата.

Для этого добавь приватный метод void notifyUsers(Connection connection, String userName) throws IOException,
где connection &ndash; соединение с участником, которому будем слать информацию, а userName &ndash; его имя.
Метод должен:
1) Пройтись по connectionMap.
2) У каждого элемента из п.1 получить имя клиента, сформировать команду с типом USER_ADDED и полученным именем.
3) Отправить сформированную команду через connection.
4) Команду с типом USER_ADDED и именем равным userName отправлять не нужно, пользователь и так имеет информацию о себе.



