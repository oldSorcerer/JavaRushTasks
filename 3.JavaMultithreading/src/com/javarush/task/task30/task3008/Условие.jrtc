taskKey="com.javarush.task.task30.task3008.big08"\n\nЧат (8)

Класс Handler должен реализовывать протокол общения с клиентом.
Выделим из протокола отдельные этапы и реализуем их с помощью отдельных методов:
Этап первый &ndash; это этап рукопожатия (знакомства сервера с клиентом). Реализуем его с
помощью приватного метода String serverHandshake(Connection connection) throws IOException,
ClassNotFoundException. Метод в качестве параметра принимает соединение connection, а
возвращает имя нового клиента.

Реализация метода должна:
1)	Сформировать и отправить команду запроса имени пользователя
2)	Получить ответ клиента
3)	Проверить, что получена команда с именем пользователя
4)	Достать из ответа имя, проверить, что оно не пустое и пользователь с таким именем
еще не подключен (используй connectionMap)
5)	Добавить нового пользователя и соединение с ним в connectionMap
6)	Отправить клиенту команду информирующую, что его имя принято
7)	Если какая-то проверка не прошла, заново запросить имя клиента
8)	Вернуть принятое имя в качестве возвращаемого значения


Требования:
1.	В классе Handler должен присутствовать метод private String serverHandshake(Connection connection).
2.	Метод serverHandshake должен отправлять запрос имени используя метод send класса Connection.
3.	До тех пор, пока тип сообщения полученного в ответ не будет равен MessageType.USER_NAME, запрос имени должен быть выполнен снова.
4.	В случае, если в ответ пришло пустое имя, запрос имени должен быть выполнен снова.
5.	В случае, если имя уже содержится в connectionMap, запрос имени должен быть выполнен снова.
6.	После успешного проведения всех проверок, метод serverHandshake должен добавлять новую пару (имя, соединение) в connectionMap и отправлять сообщение о том, что имя было принято.
7.	Метод serverHandshake должен возвращать имя нового клиента с которым было установлено соединение.


Чат (8)

Т.к. сервер может одновременно работать с несколькими клиентами, нам понадобится
метод для отправки сообщения сразу всем.

Добавь в класс Server:
1)	Статическое поле Map&lt;String, Connection&gt; connectionMap, где ключом будет имя
клиента, а значением - соединение с ним.
2)	Инициализацию поля из п.7.1 с помощью подходящего Map из библиотеки
java.util.concurrent, т.к. работа с этим полем будет происходить из разных потоков и
нужно обеспечить потокобезопасность.
3)	Статический метод void sendBroadcastMessage(Message message), который должен
отправлять сообщение  message всем соединениям из connectionMap. Если при
отправке сообщение произойдет исключение IOException, нужно отловить его и
сообщить пользователю, что не смогли отправить сообщение.



Чат (8)

Приступим к самому важному &ndash; написанию класса Server. Сервер должен поддерживать
множество соединений с разными клиентами одновременно. Это можно реализовать с
помощью следующего алгоритма:
- Сервер создает серверное сокетное соединение.
- В цикле ожидает, когда какой-то клиент подключится к сокету.
- Создает новый поток обработчик Handler, в котором будет происходить обмен
сообщениями с клиентом.
- Ожидает следующее соединение.

Добавь:
1)	В класс Server приватный статический вложенный класс Handler, унаследованный от
Thread.
2)	В класс Handler поле socket типа Socket.
3)	В класс Handler конструктор, принимающий в качестве параметра Socket и
инициализирующий им соответствующее поле класса.
4)	Метод main класса Server, должен:
а) Запрашивать порт сервера, используя ConsoleHelper.
б) Создавать серверный сокет java.net.ServerSocket, используя порт из предыдущего пункта.
в) Выводить сообщение, что сервер запущен.
г) В бесконечном цикле слушать и принимать входящие сокетные соединения только что созданного
серверного сокета.
д) Создавать и запускать новый поток Handler, передавая в конструктор сокет из предыдущего пункта.
е) После создания потока обработчика Handler переходить на новый шаг цикла.
ж) Предусмотреть закрытие серверного сокета в случае возникновения исключения.
з) Если исключение Exception все же произошло, поймать его и вывести сообщение
об ошибке.



Чат (8)

Клиент и сервер будут общаться через сокетное соединение. Одна сторона будет
записывать данные в сокет, а другая читать. Их общение представляет собой обмен
сообщениями Message. Класс Connection будет выполнять роль обертки над классом
java.net.Socket, которая должна будет уметь сериализовать и десериализовать объекты
типа Message в сокет. Методы этого класса должны быть готовы к вызову из разных
потоков.

Добавь в класс Connection:
1) final поля:
а) Socket socket
б) ObjectOutputStream out
в) ObjectInputStream in
2) Конструктор, который должен принимать Socket в качестве параметра и
инициализировать поля класса. Для инициализации полей in и out используй
соответствующие потоки сокета. Конструктор может бросать исключение IOException.
Создать объект класса ObjectOutputStream нужно до того, как будет создаваться объект
класса ObjectInputStream, иначе может возникнуть взаимная блокировка потоков,
которые хотят установить соединение через класс Connection. Более подробно об этом
ты можешь прочитать в спецификации класса ObjectInputStream.
3) Метод void send(Message message) throws IOException. Он должен записывать
(сериализовать) сообщение message в ObjectOutputStream. Этот метод будет
вызываться из нескольких потоков. Позаботься, чтобы запись в объект
ObjectOutputStream была возможна только одним потоком в определенный момент
времени, остальные желающие ждали завершения записи. При этом другие методы
класса Connection не должны быть заблокированы.
4) Метод Message receive() throws IOException, ClassNotFoundException. Он должен читать
(десериализовать) данные из ObjectInputStream. Сделай так, чтобы операция чтения
не могла быть одновременно вызвана несколькими потоками, при этом вызов других
методы класса Connection не блокировать.
5) Метод SocketAddress getRemoteSocketAddress(), возвращающий удаленный адрес
сокетного соединения.
6) Метод void close() throws IOException, который должен закрывать все ресурсы класса.

Класс Connection должен поддерживать интерфейс Closeable.



Чат (8)

Сообщение Message &ndash; это данные, которые одна сторона отправляет, а вторая принимает.
Каждое сообщение должно иметь тип MessageType, а некоторые и дополнительные
данные, например, текстовое сообщение должно содержать текст. Т.к. сообщения будут
создаваться в одной программе, а читаться в другой, удобно воспользоваться механизмом
сериализации для перевода класса в последовательность битов и наоборот.

Добавь в класс Message:
1) Поддержку интерфейса Serializable.
2) final поле типа MessageType type, которое будет содержать тип сообщения.
3) final поле типа String data, которое будет содержать данные сообщения.
4) Геттеры для этих полей.
5) Конструктор, принимающий только MessageType, он должен проинициализировать
поле type переданным параметром, а поле data оставить равным null.
6) Конструктор, принимающий MessageType type и String data. Он должен также
инициализировать все поля класса.



Чат (8)

Прежде, чем двигаться дальше, нужно разработать протокол общения клиента и сервера.

Сформулируем основные моменты протокола:
- Когда новый клиент хочет подсоединиться к серверу, сервер должен запросить имя
клиента.
- Когда клиент получает запрос имени от сервера он должен отправить свое имя серверу.
- Когда сервер получает имя клиента он должен принять это имя или запросить новое.
- Когда новый клиент добавился к чату, сервер должен сообщить остальным участникам о
новом клиенте.
- Когда клиент покидает чат, сервер должен сообщить остальным участникам об этом.
- Когда сервер получает текстовое сообщение от клиента, он должен переслать его всем
остальным участникам чата.

Добавь для каждого пункта вышеописанного протокола соответствующее значение в enum
MessageType:
1) NAME_REQUEST &ndash; запрос имени.
2) USER_NAME &ndash; имя пользователя.
3) NAME_ACCEPTED &ndash; имя принято.
4) TEXT &ndash; текстовое сообщение.
5) USER_ADDED &ndash; пользователь добавлен.
6) USER_REMOVED &ndash; пользователь удален.



