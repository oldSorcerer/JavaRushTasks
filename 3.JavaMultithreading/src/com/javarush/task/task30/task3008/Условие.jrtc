taskKey="com.javarush.task.task30.task3008.big03"\n\nЧат (3)

Прежде, чем двигаться дальше, нужно разработать протокол общения клиента и сервера.

Сформулируем основные моменты протокола:
- Когда новый клиент хочет подсоединиться к серверу, сервер должен запросить имя
клиента.
- Когда клиент получает запрос имени от сервера он должен отправить свое имя серверу.
- Когда сервер получает имя клиента он должен принять это имя или запросить новое.
- Когда новый клиент добавился к чату, сервер должен сообщить остальным участникам о
новом клиенте.
- Когда клиент покидает чат, сервер должен сообщить остальным участникам об этом.
- Когда сервер получает текстовое сообщение от клиента, он должен переслать его всем
остальным участникам чата.

Добавь для каждого пункта вышеописанного протокола соответствующее значение в enum
MessageType:
1) NAME_REQUEST &ndash; запрос имени.
2) USER_NAME &ndash; имя пользователя.
3) NAME_ACCEPTED &ndash; имя принято.
4) TEXT &ndash; текстовое сообщение.
5) USER_ADDED &ndash; пользователь добавлен.
6) USER_REMOVED &ndash; пользователь удален.


Требования:
1.	В перечислении MessageType должен присутствовать элемент NAME_REQUEST.
2.	В перечислении MessageType должен присутствовать элемент USER_NAME.
3.	В перечислении MessageType должен присутствовать элемент NAME_ACCEPTED.
4.	В перечислении MessageType должен присутствовать элемент TEXT.
5.	В перечислении MessageType должен присутствовать элемент USER_ADDED.
6.	В перечислении MessageType должен присутствовать элемент USER_REMOVED.


Чат (3)

Первым делом, для удобства работы с консолью реализуем класс ConsoleHelper. В
дальнейшем, вся работа с консолью должна происходить через этот класс.

Добавь в него:
1)	Статическое поле типа BufferedReader, инициализированное с помощью System.in.
2)	Статический метод writeMessage(String message), который должен выводить
сообщение message в консоль.
3)	Статический метод String readString(), который должен считывать строку с
консоли. Если во время чтения произошло исключение, вывести пользователю
сообщение &quot;Произошла ошибка при попытке ввода текста. Попробуйте еще раз.&quot; И
повторить ввод. Метод не должен пробрасывать исключения IOException наружу.
Другие исключения не должны обрабатываться.
4)	Статический метод int readInt(). Он должен возвращать введенное число и
использовать метод readString(). Внутри метода обработать исключение
NumberFormatException. Если оно произошло вывести сообщение &quot;Произошла ошибка
при попытке ввода числа. Попробуйте еще раз.&quot; И повторить ввод числа.

В этой задаче и далее, если не указано дополнительно другого, то все поля класса должны
быть приватными, а методы публичными.



Чат (3)

Сегодня мы напишем чат. Набор программ с помощью которого можно будет
обмениваться текстовыми сообщения. Набор будет состоять из одного сервера и
нескольких клиентов, по одному для каждого участника чата.

Начнем с сервера. Нам понадобятся такие классы:
1) Server &ndash; основной класс сервера.
2) MessageType &ndash; enum, который отвечает за тип сообщений пересылаемых между
клиентом и сервером.
3) Message &ndash; класс, отвечающий за пересылаемые сообщения.
4) Connection &ndash; класс соединения между клиентом и сервером.
5) ConsoleHelper &ndash; вспомогательный класс, для чтения или записи в консоль.

Создай эти классы и добавь метод main в класс Server.



