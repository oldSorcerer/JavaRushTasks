taskKey="com.javarush.task.task27.task2712.big10"\n\nРесторан(10)

Рекурсию используют тогда, когда алгоритм решения задачи совпадает с алгоритмом решения подзадачи (части).
У нас как раз такой случай. Нам нужно сделать полный перебор всех вариантов и выбрать из них лучший.

Напомню, рекурсия пишется по следующему принципу:
а) условие выхода/окончания рекурсии
б) условие продолжения - вызов самой себя с набором параметров предыдущего шага.
В любое время ты можешь почитать в инете подробную информацию по написанию рекурсии.

Текущее задание - реализовать п.2.2 предыдущего задания с помощью рекурсии.
(подобрать список видео из доступных, просмотр которых обеспечивает максимальную выгоду)
Рекурсивный метод должен выбрать набор рекламных роликов, которые будут показаны посетителю.

Этот набор должен удовлетворять следующим требованиям:
1) сумма денег, полученная от показов, должна быть максимальной из всех возможных вариантов
2) общее время показа рекламных роликов НЕ должно превышать время приготовления блюд для текущего заказа;
3) для одного заказа любой видео-ролик показывается не более одного раза;
4) если существует несколько вариантов набора видео-роликов с одинаковой суммой денег, полученной от показов, то:
4.1) выбрать тот вариант, у которого суммарное время максимальное;
4.2) если суммарное время у этих вариантов одинаковое, то выбрать вариант с минимальным количеством роликов;
5) количество показов у любого рекламного ролика из набора - положительное число.

Также не забудь реализовать п.2.4 из предыдущего задания (вывести на экран все подходящие ролики в порядке
уменьшения стоимости показа одного рекламного ролика в копейках. Вторичная сортировка - по увеличению стоимости
показа одной секунды рекламного ролика в тысячных частях копейки).

Для каждого показанного видео-ролика должен быть вызван метод revalidate().


Требования:
1.	Сумма денег, полученная от показов, должна быть максимальной из всех возможных вариантов.
2.	Общее время показа рекламных роликов НЕ должно превышать время приготовления блюд для текущего заказа.
3.	Для одного заказа любой видео-ролик должен показываться не более одного раза.
4.	Если существует несколько вариантов набора видео-роликов с одинаковой суммой денег, полученной от показов, то должен быть выбран вариант с максимальным суммарным временем.
5.	Если существует несколько вариантов набора видео-роликов с одинаковой суммой денег и одинаковым суммарным временем, то должен быть выбран вариант с минимальным количеством роликов.
6.	В набор должны отбираться только ролики с положительным числом показов.
7.	Для каждого показанного ролика должен быть вызван метод revalidate.


Ресторан(10)

Нам понадобится исключение, которое поможет обработать ситуацию, если у нас не будет получаться подобрать рекламные ролики.

1. Создадим unchecked исключение NoVideoAvailableException в пакете ad. Сделаем его потомком класса RuntimeException.

2. Разберем подробно метод void processVideos() в AdvertisementManager.
2.1. Удаляем из него вывод в консоль &quot;calling processVideos method&quot;
Метод должен:
2.2. Подобрать список видео из доступных, просмотр которых обеспечивает максимальную выгоду. (Пока делать не нужно, сделаем позже).
2.3. Если нет рекламных видео, которые можно показать посетителю, то бросить NoVideoAvailableException,
которое перехватить в оптимальном месте (подумать, где это место) и с уровнем Level.INFO логировать фразу
&quot;No video is available for the order &quot; + order
2.4. Отобразить все рекламные ролики, отобранные для показа, в порядке уменьшения стоимости показа одного рекламного ролика
в копейках. Вторичная сортировка - по увеличению стоимости показа одной секунды рекламного ролика в тысячных частях копейки
Используй метод Collections.sort
Пример для заказа [WATER]:
First Video is displaying... 50, 277
где First Video - название рекламного ролика
где 50 - стоимость показа одного рекламного ролика в копейках
где 277 - стоимость показа одной секунды рекламного ролика в тысячных частях копейки (равно 0.277 коп)
Используй методы из класса Advertisement.
(Этот пункт тоже пока делать не нужно, сделаем позже).
2.5. В классе Advertisement создай публичный метод void revalidate(). Этот метод должен:
2.5.1. Бросать UnsupportedOperationException, если количество показов не положительное число.
2.5.2. Уменьшать количество показов на 1.



Ресторан(10)

Пришло время описать функционал класса AdvertisementManager.
Но для начала нам понадобятся некоторые методы в классе Advertisement.

1. В классе Advertisement создай поле long amountPerOneDisplaying.
Оно должно равняться стоимости одного показа рекламного объявления в копейках (initialAmount/hits).
Присвой значение полю в конструкторе.

2. В классе Advertisement создай геттеры для полей name, duration и amountPerOneDisplaying.

3. Определим необходимые данные для объекта AdvertisementManager - это время выполнения заказа поваром.
Т.к. продолжительность видео у нас хранится в секундах, то и время выполнения заказа тоже будем принимать в секундах.
В классе AdvertisementManager создай конструктор, который принимает один параметр - int timeSeconds.
Создай соответствующее поле и сохрани это значение в него.

4. AdvertisementManager выполняет только одно единственное действие - обрабатывает рекламное видео.
Поэтому создай единственный публичный метод void processVideos(), его функционал опишем в следующем задании.
А пока выведем в консоль &quot;calling processVideos method&quot;

5. Чтобы тестировать данную функциональность, нужно добавить вызов processVideos метода у AdvertisementManager.
Очевидно, что этот метод должен вызываться во время создания заказа.
Добавь вызов метода processVideos() в нужное место.

P.S. Не забудь что время приготовления заказа считается в минутах, а время показа рекламы в секундах!



Ресторан(10)

При выборе, с какого класса начать, старайся найти тот, который используют другие, и который сам ничего не использует.
В нашем случае - это хранилище рекламных роликов (AdvertisementStorage).
Мы решили, что оно будет единственным в ресторане и сделали его синглтоном.
Опишем его.

1. Видео должно где-то храниться, пусть это будет список.
Создадим поле List&lt;Advertisement&gt; videos и инициализируем его пустым листом.
Подумай, должно ли поле videos иметь возможность менять свое значение?

2. Чтобы как-то работать с видео, создай публичные методы:
2.1. list() - который вернет список всех существующих доступных видео.
2.2. add(Advertisement advertisement) - который добавит новое видео в список videos.

3. В конструкторе класса  добавим в список videos какие-то данные. У меня это:
Object someContent = new Object();
new Advertisement(someContent, &quot;First Video&quot;, 5000, 100, 3 * 60) // 3 min
new Advertisement(someContent, &quot;Second Video&quot;, 100, 10, 15 * 60) //15 min
new Advertisement(someContent, &quot;Third Video&quot;, 400, 2, 10 * 60)   //10 min

4. В AdvertisementManager создадим final поле-ссылку на экземпляр AdvertisementStorage и назовем ее storage.
Не забудь инициализировать созданное поле!



Ресторан(10)

Заказ создается, потом готовится поваром, а после этого относится посетителю. К тому же считается время выполнения заказа.
Будем считать, что первая часть задания выполнена.
Перейдем ко второй - пока заказ готовится, на планшете должна показываться реклама.
Определим, что такое реклама.

Реклама - это видео определенной продолжительности. Также известно, что кто-то оплатил количество показов.
Будем считать, что у нас известно количество оплаченных показов, общая стоимость всех показов и сам рекламный ролик.

1. Для связанного с рекламой функционала создадим пакет ad.

2. Создадим класс Advertisement(Рекламное объявление) в пакете ad, у которого будут следующие поля:
Object content - видео
String name - имя/название
long initialAmount - начальная сумма, стоимость рекламы в копейках. Используем long, чтобы избежать проблем с округлением
int hits - количество оплаченных показов
int duration - продолжительность в секундах
Модификаторы доступа расставь самостоятельно.

3. В классе Advertisement создадим конструктор с порядком аргументов, соответствующим перечисленной последовательности всех полей класса

4. В этом же пакете создадим еще два класса:
AdvertisementStorage - хранилище рекламных роликов.
AdvertisementManager - у каждого планшета будет свой объект менеджера,
который будет подбирать оптимальный набор роликов и их последовательность для каждого заказа.
Он также будет взаимодействовать с плеером и отображать ролики.

5. Так как хранилище рекламных роликов AdvertisementStorage единственное для всего ресторана, то сделаем его синглтоном.



Ресторан(10)

Сейчас повар готовит блюда моментально. На самом деле приготовление занимает какое-то время.
Нам нужно вычислить время приготовления всего заказа, чтобы потом подбирать рекламные ролики для этого времени.

1. Предположим, что нам известно время приготовления каждого блюда в минутах. Захардкодим его в классе Dish.
1.1. Измени создание элементов enum - FISH(25), STEAK(30), SOUP(15), JUICE(5), WATER(3);
1.2. Создай поле private int duration с геттером.
Чтобы создать геттер, нажми Alt+Insert и выбери пункт Getter. Далее выбери имя поля и нажмите OK(Enter).
1.3. Создай конструктор Dish(int duration), в котором инициализируй поле duration.
Чтобы создать конструктор, нажми Alt+Insert и выбери пункт Constructor. Далее выбери имя поля и нажми OK(Enter).

2. Добавим возможность посчитать продолжительность приготовления всего заказа.
Куда его добавить???
2.1. Если в класс Cook, то повар сможет считать продолжительность приготовления заказа.
Чтобы другие классы могли получить эту информацию, необходимо будет получить доступ к объекту Cook.
2.2. Если в класс Order, то имея доступ к заказу всегда можно узнать продолжительность приготовления.
2.3. Выбери правильное место из п.2.1. и п.2.2. и добавьте метод public int getTotalCookingTime(),
который посчитает суммарное время приготовления всех блюд в заказе.
2.4. Добавим вывод в консоль этой информации. Пусть теперь информация о заказе выводится в таком виде:
Your order: [SOUP, JUICE, WATER] of Tablet{number=5}, cooking time 23min

Наведем красоту:
3. Запустим приложение и сразу введем &#39;exit&#39;. Вывод получился не очень красивым:
Start cooking - , cooking time 0min
was cooked by Amigo
Сделай так, чтобы если в заказе нет блюд, он не отправлялся повару. Найди это место и реализуй логику.
Для этого также в классе Order создай вспомогательный метод public boolean isEmpty(), который будет определять, есть ли какие либо блюда в заказе.



