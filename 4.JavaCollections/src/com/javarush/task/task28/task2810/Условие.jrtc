taskKey="com.javarush.task.task28.task2810.big04"\n\nAggregator (4)

Открой сайт поиска работы - https://grc.ua/ и https://hh.ru/
В строке поиска набери &quot;java Kiev&quot;, снизу перейди на вторую страницу, т.к. урлы часто отличаются на первой странице и далее.
У меня получилась такая ссылка:
https://grc.ua/search/vacancy?text=java+Kiev&amp;page=1 и https://hh.ru/search/vacancy?text=java+Kiev&amp;page=1
Из этого следует, что
1) если тебе нужно будет фильтровать по городу, то ты добавишь его после слова java, разделив их знаком &quot;+&quot;,
2) нумерация страниц начинается с 0.

Итак, ссылка будет примерно такой:
https://grc.ua/search/vacancy?text=java+ADDITIONAL_VALUE&amp;page=PAGE_VALUE

1. Из полученной ссылки в HHStrategy создай приватную строковую константу URL_FORMAT, которая будет передаваться в String.format().
В результате подстановки константы URL_FORMAT в String.format(URL_FORMAT, &quot;Kiev&quot;, 3) с такими параметрами, результат должен быть таким:
&quot;https://grc.ua/search/vacancy?text=java+Kiev&amp;page=3&quot;
или
&quot;https://hh.ru/search/vacancy?text=java+Kiev&amp;page=3&quot;
Для этого скопируй ссылку в код и нажми на ней нужную комбинацию клавиш.
Ctrl+Alt+C(Constant) - создание констант,
Ctrl+Alt+M(Method) - создание методов,
Ctrl+Alt+V(Variable) - создание переменных.

2. Тебе нужно программно получить исходный код страницы. Это HTTP запрос. Тебе понадобится Java HTML Parser.
Хороший парсер jsoup, будешь использовать его. Мы будем использовать версию 1.9.2.

3. Скачать и подключить новые либы можно так:
В IDEA открой Project Structure (в меню File).
Слева выбери Project Settings -&gt; Libraries, в окошке справа сверху нажми &quot;+&quot;.
Выбери &quot;From Maven...&quot;. В окне поиска введи &quot;org.jsoup:jsoup:1.9.2&quot;. Поставь галочку на &quot;Download to:&quot; и выбери куда скачать либу.
Также поставь галочки на &quot;Transitive dependencies&quot;, &quot;Sources&quot;.
В окне Choose Modules выбери модуль 4.JavaCollections.

4. Прочитай дополнительный материал к лекции в Сообществе.
https://javarush.ru/groups/posts/2007-legkiy-parsing-html-s-pomojshjhju-jsoup
https://javarush.ru/groups/posts/1086-3-primera-kak-razobratjh-html-fayl-v-java-ispoljhzuja-jsoup


Требования:
1.	В классе HHStrategy создай приватную строковую константу URL_FORMAT.
2.	Результат команды String.format(URL_FORMAT, String, int) должен генерироваться согласно заданию.
3.	Для выполнения дальнейших указаний, подключи библиотеку jsoup версии 1.9.2 (проверка этого требования не выполняется).


Aggregator (4)

Начиная с этого задания ты начнешь писать логику получения данных с сайта.
Эта логика будет полностью сосредоточена в классах, реализующих интерфейс Strategy.

Провайдер в данном случае выступает в качестве контекста, если мы говорим о паттерне Стратегия.
В провайдере должен быть метод, который будет вызывать метод стратегии для выполнения главной операции.
Этот метод будет возвращать все java вакансии с выбранного сайта (ресурса).

1. В корне задачи создай пакет vo (value object), в котором создай класс Vacancy.
Этот класс будет хранить данные о вакансии.

2. В Provider создай публичный метод List&lt;Vacancy&gt; getJavaVacancies(String searchString). Оставь пока метод пустым.

3. Что есть у вакансии?
Название, зарплата, город, название компании, название сайта, на котором вакансия найдена, ссылка на вакансию.
В классе Vacancy создай соответствующие приватные строковые поля: title, salary, city, companyName, siteName, url.

4. Создай геттеры и сеттеры для всех полей класса Vacancy.

5. В пакете model создай класс HHStrategy, реализующий интерфейс Strategy.
Этот класс будет реализовывать конкретную стратегию работы с сайтом поиска работы (https://grc.ua/ и https://hh.ru/).



Aggregator (4)

1. В корне задачи создай класс Controller, в нем будет содержаться логика работы программы.

2. В Controller добавь публичный конструктор, который будет принимать столько провайдеров, сколько в него передадут для обработки
(аргументы переменной длины - varargs). Сохрани их в приватное поле providers.
Помнишь, как это делать? Нужно нажать на аргументе конструктора Alt+Enter, выбрать Create Field for Parameter &#39;providers&#39;.

3. Если провайдеры не переданы в конструктор контроллера, то брось IllegalArgumentException.

4. Создай метод toString() в классе Controller (Alt+Insert -&gt; toString()) со стандартной реализацией (должен выводить поле providers).

5. В методе main() класса Aggregator:
5.1. Создай провайдер. Поскольку реализации стратегии (Strategy) пока нет, то в конструктор провайдера передай null.

5.2. Создай контроллер с этим провайдером.

5.3. В методе main() выведи в консоль созданный экземпляр Controller-а.



Aggregator (4)

Пришло время немного поработать с информацией в инете. В этом задании ты будешь писать агрегатор java вакансий.
Что у нас должно быть?
Должен быть список сайтов, на которых мы ищем вакансии.
Для начала возьмем https://grc.ua/ и https://hh.ru/, потом уже добавим другие сайты поиска работы.
Это один и тот же сайт, только в разных доменах.

С чего же нужно начать реализацию? Конечно же с метода main :)
1. Создай класс Aggregator с методом main.

2. Создай пакет model, в нем создай класс Provider.
Этот класс будет обобщать способ получения данных о вакансиях.

3. Т.к. для каждого сайта будет выполняться одинаковый сценарий, то будет паттерн Стратегия. Почитай про него в инете на вики.
В пакете model создай интерфейс Strategy.
Он будет отвечать за получение данных с сайта.

4. В класс Provider добавь приватное поле Strategy strategy. Добавь конструктор с этим полем и сеттер.



