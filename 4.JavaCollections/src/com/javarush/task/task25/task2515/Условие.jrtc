taskKey="com.javarush.task.task25.task2515.big14"\n\nSpace (14)

Теперь напиши класс Ufo.
Он чуть сложнее класса Bomb и проще SpaceShip.
Тебе понадобятся методы public void draw(Canvas canvas), public void move(), public void fire().
Также не забудь о конструкторе. Типы параметров double, а радиус UFO будет равен 3.

Метод draw() сделай по аналогии с SpaceShip. Рисовать UFO будем символом &#39;U&#39;.
И добавь матрицу, по аналогии с SpaceShip.

Метод move() надо сделать так:
а) UFO перемещается по случайной траектории (не забудь о проверке границ);
Подсказка:
double dx = Math.random() * 2 - 1;  //-1..1
double dy = Math.random() * 2 - 1;  //-1..1
б) UFO не опускается в нижнюю половину экрана;
y &lt;= height/2
в) С вероятностью 10% UFO должен стрелять - вызывать метод fire.

Метод fire():
UFO сбрасывает одну бомбу посередине.
Сделать аналогично классу SpaceShip.


Требования:
1.	В классе Ufo конструктор должен принимать координаты x и y, а радиус выставлять всегда равным 3.
2.	В классе Ufo добавь поле с матрицей объекта по аналогии с классом SpaceShip.
3.	В классе Ufo напиши метод draw(), который должен отрисовывать объект по аналогии с классом SpaceShip.
4.	В классе Ufo напиши метод move(), который изменяет координаты объекта согласно заданию.
5.	В классе Ufo напиши метод fire(), который создает бомбу под объектом посередине и добавляет ее в список Space.bombs.
6.	В классе Ufo в методе move() добавь вызов метода fire() c вероятностью 10%.


Space (14)

Теперь перейдем к методам draw и move.
В методе public void move() нужно:
а) увеличить x на dx;
б) проверить, не вылез ли корабль за границы космоса [0, Space.game.getWidth(), ...]. Используй метод checkBorders.

Метод public void draw(Canvas canvas) я напишу сам - просто объяви пустой метод.

Еще нам понадобится метод public void fire(), ведь корабль умеет стрелять.
Этот метод вызывается, когда надо произвести выстрел.
В этом методе нужно:
а) создать две ракеты;
б) установить им координаты левого края корабля и правого края корабля (пушки находятся на расстоянии 2 от центра корабля);
в) добавить эти ракеты в список ракет объекта game. Его можно получить так: Space.game.getRockets()



Space (14)

Теперь займемся кораблем.
Для сложности сделаем так: если пользователь нажал кнопку влево, то корабль начинает все время двигаться влево.
Если нажал кнопку вправо - все время вправо до упора.
Поэтому заведем специальную переменную dx, которая будет хранить направление движения корабля.
если dx = 1, корабль каждый ход идет на 1 вправо,
если dx = -1, корабль каждый ход идет на 1 влево.
Нужно:
а) добавить конструктор, можно такой:
Радиус корабля будет равен 3. Корабль большой - это вам не ракета и не бомба.
public SpaceShip(double x, double y)
{
super(x, y, 3);
}
б) добавить в класс SpaceShip приватное поле dx (double, по умолчанию равна 0);
в) написать метод public void moveLeft(), который устанавливает поле dx равным -1;
г) написать метод public void moveRight(), который устанавливает поле dx равным 1.



Space (14)

Теперь напишем класс Rocket.
Практически совпадает с классом Bomb.
Только:
а) Ракета летит вверх (т.е. y уменьшается на 1);
б) Рисуем не букву &quot;B&quot;, а букву &quot;R&quot;.



Space (14)

Теперь напишем класс Bomb. Тут все просто.
Bomb унаследован от BaseObject.
Нужно:
а) изменить конструктор:
Конструктор Bomb должен выглядеть примерно так:
public Bomb(double x, double y)
{
super(x, y, 1);
}
x и y переданные в конструктор Bomb мы передаем дальше в конструктор BaseObject с помощью super,
где так же указываем радиус &quot;бомбы&quot; равный 1.

б) написать метод public void move():
Тут все просто - бомба падает вниз  - просто увеличиваем y на 1.

в) написать метод public void draw(Canvas canvas):
Тут тоже не очень сложная логика. Давай просто ставить точку с координатами (x,y) и &quot;цветом&quot; B:
canvas.setPoint(x,y,&#39;B&#39;).

Создай в классе Space нашу игру public static Space game.



Space (14)

Еще Canvas понадобится два метода, напиши их.
а) метод public void clear();
Этот метод будет очищать матрицу, чтобы на ней снова можно было рисовать.
В методе нужно заменить все символы матрицы на пробелы.

б) метод public void print();
Этот метод отрисовывает матрицу на экран.
Тут уже ты должен сам разобраться: вывести набор символов не так уж и сложно.
Не забудь добавить пару пустых строк в конце, чтобы матрицы выведенные в разное время не слипались.



