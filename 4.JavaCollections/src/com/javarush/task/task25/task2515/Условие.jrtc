taskKey="com.javarush.task.task25.task2515.big10"\n\nSpace (10)

Теперь напишем класс Bomb. Тут все просто.
Bomb унаследован от BaseObject.
Нужно:
а) изменить конструктор:
Конструктор Bomb должен выглядеть примерно так:
public Bomb(double x, double y)
{
super(x, y, 1);
}
x и y переданные в конструктор Bomb мы передаем дальше в конструктор BaseObject с помощью super,
где так же указываем радиус &quot;бомбы&quot; равный 1.

б) написать метод public void move():
Тут все просто - бомба падает вниз  - просто увеличиваем y на 1.

в) написать метод public void draw(Canvas canvas):
Тут тоже не очень сложная логика. Давай просто ставить точку с координатами (x,y) и &quot;цветом&quot; B:
canvas.setPoint(x,y,&#39;B&#39;).

Создай в классе Space нашу игру public static Space game.


Требования:
1.	В классе Bomb конструктор должен принимать координаты, а радиус выставлять всегда равным 1.
2.	В классе Bomb напиши метод move(), который увеличивает координату y на единицу.
3.	В классе Bomb напиши метод draw(Canvas canvas), который для canvas будет ставить символ &#39;B&#39; в координатах x, y.
4.	В классе Space создай поле public static Space game.


Space (10)

Еще Canvas понадобится два метода, напиши их.
а) метод public void clear();
Этот метод будет очищать матрицу, чтобы на ней снова можно было рисовать.
В методе нужно заменить все символы матрицы на пробелы.

б) метод public void print();
Этот метод отрисовывает матрицу на экран.
Тут уже ты должен сам разобраться: вывести набор символов не так уж и сложно.
Не забудь добавить пару пустых строк в конце, чтобы матрицы выведенные в разное время не слипались.



Space (10)

Что мы будем делать с Canvas?
Мы будем рисовать на нем (в его матрице).
Поэтому нам понадобятся два метода:
public void setPoint(double x, double y, char c),
public void drawMatrix(double x, double y, int[][] matrix, char c).

Первый метод - setPoint будет &quot;ставить точку в координатах x,y цветом c&quot;.
В методе нужно:
а) математически округлить x и y до целых чисел,
б) занести в matrix[y][x] значение с, если x и y находятся в пределах матрицы (0&lt;=x&lt;matrix[0].length и 0&lt;=y&lt;matrix.length).

Второй метод - drawMatrix копирует переданную ему картинку (матрицу) в матрицу Canvas.
И не просто копирует, а начиная с координат x, y.
В методе нужно:
а) с помощью двух вложенных циклов пройтись по всем ячейкам переданной картинки,
б) если значение ячейки matrix[i][j] не равно 0, то покрасить в матрице объекта Canvas точку (x+j, y+i) в цвет c:
setPoint(x+j, y+i, c)



Space (10)

Теперь займемся классом Canvas.
Он у нас будет содержать матрицу, куда мы будем рисовать.
У матрицы есть ширина и высота.
А еще будем в ней хранить не числа(int), а символы (char).
В классе Canvas необходимо:
а) Добавить две переменные width и height;
б) Добавить переменную matrix (char[][]);
в) Добавить геттеры для них;
г) В конструкторе проинициализировать матрицу.



Space (10)

Но и это еще не все.
Классу BaseObject нужны еще методы.
Пока это будут пустые методы draw() и move().
Классы-наследники должны будут переопределить их у себя и реализовать необходимую функциональность.

Еще добавь метод die() - объект умирает (isAlive=false)

А еще нам нужно будет определять попала бомба в корабль или ракета в НЛО.
Это будем делать так:
Создадим специальный метод: public boolean isIntersect(BaseObject o)
Он будет определять - &quot;пересеклись&quot; объекты или нет. Если пересеклись - возвращать true, если нет - false.

Т.к. объекты мы условно считаем кругами, то предлагаю такую формулу взаимодействия:
если центр круга одного объекта попал в круг другого, то будем считать, что они столкнулись.
Или еще проще:
дистанция_между_объектами &lt; max (радиус_первого_объекта, радиус_второго_объекта).



Space (10)

Теперь перейдем к классу BaseObject.
Я хочу сделать несколько предложений.

Во-первых. Для простоты, считать все объекты у нас в космосе круглыми.
Нет, отрисовывать их мы будем фигурными, как и раньше.
А вот при расчетах их взаимодействия исходить из того, что они круглые.
Так - гораздо проще.

Во-вторых. Пусть координаты объектов и радиус будут вещественными числами.
Это придаст плавность движениям и точность всем вычислениям.
А при отрисовке мы будем их округлять.

В классе BaseObject необходимо:
а) Добавить переменные x (double), y (double), radius (double), геттеры и сеттеры для них.
б) Добавить логическую переменную isAlive (жив объект или уже нет).
в) Добавить геттер (isAlive()-метод для isAlive-переменной).
г) Добавить конструктор BaseObject(double x, double y, double radius).
д) Проследить, чтобы в конструкторе isAlive устанавливался в true (мертворожденные нам ни к чему).
Также надо пройтись по всем классам-наследникам и поправить у них конструкторы.
Если ты используешь Intellij IDEA - Alt+Insert тебе в помощь.



