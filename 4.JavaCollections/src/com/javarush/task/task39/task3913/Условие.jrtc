taskKey="com.javarush.task.task39.task3913.big01"\n\nПарсер логов (1)

Сегодня мы напишем парсер логов.
Лог файл имеет следующий формат:
ip username date event status
Где:
ip - ip адрес с которого пользователь произвел событие.
user - имя пользователя (одно или несколько слов разделенные пробелами).
date - дата события в формате day.month.year hour:minute:second.
event - одно из событий:
LOGIN - пользователь залогинился,
DOWNLOAD_PLUGIN - пользователь скачал плагин,
WRITE_MESSAGE - пользователь отправил сообщение,
SOLVE_TASK - пользователь попытался решить задачу,
DONE_TASK - пользователь решил задачу.
Для событий SOLVE_TASK и DONE_TASK существует дополнительный параметр,
который указывается через пробел, это номер задачи.
status - статус:
OK - событие выполнилось успешно,
FAILED - событие не выполнилось,
ERROR - произошла ошибка.

Пример строки из лог файла:
&quot;146.34.15.5	Eduard Petrovich Morozko	05.01.2021 20:22:55	DONE_TASK 48	FAILED&quot;.
Записи внутри лог файла не обязательно упорядочены по дате, события могли
произойти и быть записаны в лог в разной последовательности.
Все параметры разделены табуляцией (&quot;\t&quot;)

Класс, который будет отвечать за парсинг логов называется LogParser.
1.1.	Добавь в класс LogParser конструктор с параметром Path logDir, где logDir -
директория с логами (логов может быть несколько, все они должны иметь расширение log).
1.2.	Реализуй интерфейс IPQuery у класса LogParser:
1.2.1.	Метод getNumberOfUniqueIPs(Date after, Date before) должен возвращать
количество уникальных IP адресов за выбранный период. Здесь и далее,
если в методе есть параметры Date after и Date before, то нужно возвратить
данные касающиеся только данного периода (включая даты after и before).
Если параметр after равен null, то нужно обработать все записи, у которых
дата меньше или равна before.
Если параметр before равен null, то нужно обработать все записи, у которых
дата больше или равна after.
Если и after, и before равны null, то нужно обработать абсолютно все записи
(без фильтрации по дате).
1.2.2.	Метод getUniqueIPs() должен возвращать множество, содержащее все
не повторяющиеся IP. Тип в котором будем хранить IP будет String.
1.2.3.	Метод getIPsForUser() должен возвращать IP, с которых работал
переданный пользователь.
1.2.4.	Метод getIPsForEvent() должен возвращать IP, с которых было произведено
переданное событие.
1.2.5.	Метод getIPsForStatus() должен возвращать IP, события с которых
закончилось переданным статусом.

Реализацию метода main() можешь менять по своему усмотрению.


Требования:
1.	В классе LogParser должен быть создан конструктор public LogParser(Path logDir).
2.	Класс LogParser должен поддерживать интерфейс IPQuery.
3.	Метод getNumberOfUniqueIPs(Date, Date) должен возвращать количество уникальных IP адресов за выбранный период.
4.	Метод getUniqueIPs(Date, Date) класса LogParser должен возвращать множество, содержащее все не повторяющиеся IP адреса за выбранный период.
5.	Метод getIPsForUser(String, Date, Date) класса LogParser должен возвращать IP адреса, с которых работал переданный пользователь за выбранный период.
6.	Метод getIPsForEvent(Event, Date, Date) класса LogParser должен возвращать IP адреса, с которых было произведено переданное событие за выбранный период.
7.	Метод getIPsForStatus(Status, Date, Date) класса LogParser должен возвращать IP адреса, события с которых закончилось переданным статусом за выбранный период.


