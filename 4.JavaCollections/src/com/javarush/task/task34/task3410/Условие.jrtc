taskKey="com.javarush.task.task34.task3410.big02"\n\nSokoban (2)

Основа заложена, теперь перейдем к ее наполнению. Игровой процесс можно представить
как взаимодействие игровых объектов GameObject. У нас их будет несколько видов: ящик
Box, дом Home (место куда нужно поместить ящик), стена Wall и игрок Player.
2.1. Добавь абстрактный класс GameObject в пакет model.
2.2. Добавь в класс GameObject поля: int x, int y, int width и int height. Это будет позиция и
размер объекта для отрисовки.
2.3. Добавь сеттеры и геттеры для полей класса.
2.4. Добавь в класс Model публичную статическую константу int FIELD_CELL_SIZE = 20, это
будет размер ячейки игрового поля. Все игровые объекты будут занимать одну ячейку
игрового поля. Именно этот размер будет участвовать в расчёте движения и
столкновений объектов. Размер, который будет храниться внутри объекта, будет
использоваться только при его отрисовке.
2.5. Добавь в класс GameObject два конструктора:
2.5.1. GameObject(int x, int y)
2.5.2. GameObject(int x, int y, int width, int height)
Конструкторы должны инициализировать все поля класса. Если width и height не переданы,
используй FIELD_CELL_SIZE в качестве ширины и высоты.
2.6. Добавь абстрактный метод void draw(Graphics graphics) в класс GameObject. Этот метод
будет реализован в каждом типе игровых объектов по-своему. Другими словами,
каждый тип игровых объектов будет знать, как он должен рисоваться и будет сам себя
рисовать в графический контекст graphics. Graphics &ndash; это абстрактный класс из
библиотеки java.awt.


Требования:
1.	Добавь абстрактный класс GameObject в пакет model.
2.	Добавь в класс GameObject поля: int x, int y, int width и int height.
3.	Добавь публичный абстрактный метод void draw(Graphics graphics) в класс GameObject.
4.	Добавь в класс Model публичную статическую константу int FIELD_CELL_SIZE = 20.
5.	Добавь в класс GameObject два конструктора: GameObject(int x, int y) и GameObject(int x, int y, int width, int height). Конструкторы должны инициализировать все поля класса, согласно условию задачи.
6.	Добавь сеттеры и геттеры для полей класса GameObject.


Sokoban (2)

Сегодня мы напишем свою реализацию игры Сокобан. Это логическая игра-головоломка,
более подробно про нее можешь прочитать в Википедии. Игра будет состоять из 3х
основных компонентов (как ты догадался, тут не обошлось без паттерна MVC).
Графический интерфейс будет реализован с использованием Swing.
1.1. Создай пакет view и добавь в него класс View, унаследованный от JFrame. Этот класс
будет отвечать за графическое представление нашей игры.
1.2. Создай пакет model и добавь в него класс Model. Этот класс будет отвечать за модель
нашей игры. Как тебе названия классов? Правда они непредсказуемые? :) На самом
деле, очень важно назвать классы так, чтобы человек, который впервые видит твой
проект, сразу понял за что они отвечают.
1.3. Создай пакет controller и добавь в него класс Controller с конструктором по умолчанию.
1.4. Добавь в класс View конструктор, который будет принимать Controller и сохранять его
во внутреннем поле класса, которое тоже нужно добавить. Поле назови controller.
1.5. Добавь в класс Controller поля View view и Model model. Проинициализируй их в
конструкторе.
1.6. Т.к. контроллер - это наш главный класс, добавь в него метод main.



