taskKey="com.javarush.task.task37.task3707.big03"\n\nAmigoSet (3)

Напиши свою реализацию следующих методов при условии, что нужно работать с ключами мапы:
* Iterator&lt;E&gt; iterator() - очевидно, что это итератор ключей. Получи множество ключей в map, верни его итератор
* int size() - это количество ключей в map, равно количеству элементов в map
* boolean isEmpty()
* boolean contains(Object o)
* void clear()
* boolean remove(Object o)

Ничего своего писать не нужно, используй то, что уже реализовано для множества ключей map.
Используй Alt+Insert =&gt; Override methods


Требования:
1.	Метод iterator должен возвращать итератор для множества ключей поля map.
2.	Метод size должен возвращать то же, что и метод size поля map.
3.	Метод isEmpty должен возвращать tто же, что и метод isEmpty поля map.
4.	Метод contains должен возвращать true, если map содержит анализируемый элемент, иначе - false.
5.	Метод clear должен вызывать метод clear объекта map.
6.	Метод remove должен удалять из map полученный в качестве параметра элемент.


AmigoSet (3)

Изобретать механизм работы с хешем не будем, он уже реализован во многих коллекциях.
Мы возьмем коллекцию HashMap и воспользуемся ей.

1. Создай приватную константу Object PRESENT, которую инициализируй объектом Object, это будет наша заглушка.

2. Создай private transient поле HashMap&lt;E,Object&gt; map. Список ключей будет нашим сэтом, а вместо значений будем пихать в мапу заглушку PRESENT.
Напомню, нам нужны только ключи, а вместо значений для всех ключей будем вставлять PRESENT. Там же должно что-то быть :)
Посмотрим, что из этого получится :)

Коллекции обычно имеют несколько конструкторов, поэтому:

3. Создай конструктор без параметров, в котором инициализируй поле map.

4. Создай конструктор с одним параметром Collection&lt;? extends E&gt; collection.
Для инициализации поля map воспользуйся конструктором, в который передается Capacity.
Вычисли свою Capacity по такой формуле: максимальное из 16 и округленного в большую сторону значения (collection.size()/.75f)
Добавь все элементы из collection в нашу коллекцию.
Нужный метод добавления всех элементов у нас есть благодаря тому, что AbstractSet наследуется от AbstractCollection.

5. Напиши свою реализацию для метода метод add(E e): добавь в map элемент &#39;e&#39; в качестве ключа и PRESENT в качестве значения.
Верни true, если был добавлен новый элемент, иначе верни false.



AmigoSet (3)

Давай напишем какую-нибудь коллекцию. Пусть это будет твой собственный Set.
Пусть этот класс позволяет вставку NULL.

1. Создай класс AmigoSet. Пусть этот класс наследуется от AbstractSet.
Этот сэт должен поддерживать интерфейсы Serializable и Cloneable (как же без этого??).
Также очевидно, что он должен реализовывать интерфейс Set.

2. Этот класс должен работать с любыми типами, поэтому сделай его дженериком: добавь тип, например, E.
Стандартные буквы, которые используют для дженериков - это E (element), T (type), K (key), V (value).
Названия не принципиальны, но облегчают чтение кода.

3. Воспользуйся горячими клавишами Идеи и реализуй необходимые методы, оставь реализацию по умолчанию.



