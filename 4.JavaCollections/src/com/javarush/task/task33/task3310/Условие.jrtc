taskKey="com.javarush.task.task33.task3310.big03"\n\nShortener (3)

Вернемся к классу Shortener:
3.1.	Добавь в него поле Long lastId. Проинициализируй его нулем. Это поле будет
отвечать за последнее значение идентификатора, которое было использовано при
добавлении новой строки в хранилище.
3.2.	Добавь поле StorageStrategy storageStrategy в котором будет храниться стратегия
хранения данных.
3.3.	Добавь конструктор, который принимает StorageStrategy и инициализирует
соответствующее поле класса.
3.4.	Реализуй метод getId, он должен:
3.4.1.	Проверить есть ли переданное значение в хранилище, если есть &ndash; вернуть
его ключ.
3.4.2.	Если преданного значения нет в хранилище, то:
3.4.2.1.	Увеличить значение lastId на единицу;
3.4.2.2.	Добавить в хранилище новую пару ключ-значение (новое значение
lastId и переданную строку);
3.4.2.3.	Вернуть новое значение lastId.
3.5.	Реализуй метод getString, он должен вернуть строку по заданному идентификатору
(ключу).
3.6.	Предусмотреть возможность вызова методов getId и getString из разных потоков
добавив соответствующий модификатор к заголовкам методов.


Требования:
1.	В классе Shortener должно быть создано приватное поле Long lastId инициализированное нулем.
2.	В классе Shortener должно быть создано приватное поле storageStrategy типа StorageStrategy.
3.	Конструктор класса Shortener должен принимать один параметр типа StorageStrategy и инициализировать им поле storageStrategy.
4.	Метод getId должен быть реализован в соответствии с условием задачи.
5.	Метод getString должен быть реализован в соответствии с условием задачи.


Shortener (3)

Укорачиватель Shortener будет поддерживать разные стратегии хранения данных
(строк и их идентификаторов). Все эти стратегии будут наследоваться от интерфейса
StorageStrategy. Почитай подробнее про паттерн Стратегия на Вики.
Наше хранилище будет оперировать двумя понятиями: ключ и значение. Ключом будет
идентификатор строки, а значением сама строка.

2.1.	Добавь интерфейс StorageStrategy в пакет strategy.
2.2.	Добавь в интерфейс следующие методы:
2.2.1.	boolean containsKey(Long key) &ndash; должен вернуть true, если хранилище
содержит переданный ключ.
2.2.2.	boolean containsValue(String value) - должен вернуть true, если хранилище
содержит переданное значение.
2.2.3.	void put(Long key, String value) &ndash; добавить в хранилище новую пару ключ &ndash;
значение.
2.2.4.	Long getKey(String value) &ndash; вернуть ключ для переданного значения.
2.2.5.	String getValue(Long key) &ndash; вернуть значение для переданного ключа.



Shortener (3)

Давай напишем укорачиватель Shortener. Это будет некий аналог укорачивателя
ссылок Google URL Shortener (https://goo.gl), но мы расширим его функциональность и
сделаем консольным. Он будет сокращать не только ссылки, но и любые строки.
Наш Shortener &ndash; это класс, который может для любой строки вернуть некий
уникальный идентификатор и наоборот, по ранее полученному идентификатору
вернуть строку.

Два дополнительных требования к Shortener:
- для двух одинаковых строк должен возвращаться один и тот же идентификатор;
- он должен поддерживать столько строк, сколько значений может принимать long,
именно этот тип будет использоваться для идентификатора.
Первое требование очень сильно влияет на производительность, т.к. при получении
идентификатора для новой строки мы должны проверить не обрабатывалась ли эта
строка ранее, чтобы вернуть старый идентификатор.

1.1.	Объяви класс Shortener.
1.2.	Добавь методы заглушки в объявленный класс:
1.2.1.	Long getId(String string) &ndash; будет возвращать идентификатор id для заданной
строки.
1.2.2.	String getString(Long id) &ndash; будет возвращать строку для заданного
идентификатора или null, если передан неверный идентификатор.

1.3.    Создай класс Solution с пустым методом main.

P.S. Все методы делай публичными, а поля приватными, если нет явных указаний касательно модификаторов доступа.



