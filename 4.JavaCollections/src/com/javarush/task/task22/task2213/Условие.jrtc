taskKey="com.javarush.task.task22.task2213.big06"\n\nТетрис(6)

Теперь перейдем к классу Field.
Он будет отвечать за хранение данных о текущих занятых и свободных клетках на поле игры.
Добавь в класс Field два поля поля: width (ширина) типа int, height(высота) типа int.
Так же нам понадобится матрица - двумерный массив: matrix(матрица) типа int[][];
Там же добавь getter&#39;ы для созданных переменных.
Добавь конструктор с двумя параметрами width и height. И не забудь про матрицу.

ВАЖНО!
Двумерный массив можно представить как массив массивов или как прямоугольную матрицу.
При этом первой координатой в массиве у нас будет номер строки, а второй - столбца.
Другими словами ячейка с координатами x, y - это matrix[y][x].


Требования:
1.	В классе Field должно быть создано приватное поле width типа int.
2.	В классе Field должно быть создано приватное поле height типа int.
3.	В классе Field должно быть создано приватное поле matrix типа int[][](целочисленный двумерный массив).
4.	В классе Field должен быть создан корректный геттер для поля height.
5.	В классе Field должен быть создан корректный геттер для поля width.
6.	В классе Field должен быть создан корректный геттер для поля matrix.
7.	В классе Field должен быть создан корректно работающий конструктор с параметрами int, int. Поле matrix должно быть инициализировано новым массивом размерностью [y][x] (height и width).


Тетрис(6)

Теперь нужно создать объект самого Тетриса.
Добавь в класс Tetris статическое поле game типа Tetris.
Поле game НЕ должно быть приватным.

Затем в методе main создай объект типа Тетрис и сохрани его в эту переменную.
Затем добавь вызов метода run.



Тетрис(6)

Так же еще нам понадобится пара методов.
Добавь в класс Tetris методы run() и step():

run() будет отвечать за всю игру.
А step() - за один шаг в игре.

Тип возвращаемого значения void для обоих методов.

Тут и в будущем, если нет явных указаний с каким модификатором доступа создавать метод, то он должен быть публичным, а поле приватным.

*В общем случае, стоит руководствоваться правилом использования наиболее строгого(из возможных) модификатора доступа.
*Т.е. если логика системы предполагает обращения к методу извне класса, мы не сможем сделать такой метод приватным.
*Но также нет никаких причин указывать уровень доступа public для методов которые будут использованы только в рамках пакета.
*Поначалу это кажется несущественным, но на самом деле это один из основополагающих принципов ООП.
*Учись сразу делать правильно!



Тетрис(6)

Поле есть, фигура есть, а как их получить?

Добавь геттеры для полей field и figure.



Тетрис(6)

Отлично!
Теперь добавь в класс Tetris два поля: field типа Field и figure типа Figure.



Тетрис(6)

Давай напишем игру Тетрис!

Наш Тетрис будет состоять из двух вещей: поля из клеток и фигурки, которая падает.
Поэтому для начала создай три класса: Field(поле с клетками), Figure(фигура) и сам Tetris.

Также нам понадобится метод main в классе Tetris.



