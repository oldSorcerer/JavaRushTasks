taskKey="com.javarush.task.task22.task2213.big07"\n\nТетрис(7)

Нам понадобится еще 4 метода в классе Field:
а) void print() - объект будет отрисовывать на экран свое текущее состояние;
б) void removeFullLines() - будет удалять из матрицы полностью заполненные строки и сдвигать вышележащие строки вниз;
в) Integer getValue(int x, int y) - возвращает значение, которое находится в матрице с координатами x и y; Реализацию метода мы напишем позже, а сейчас для того, чтобы программа скомпилировалась, верни в методе какое-нибудь значение, например, null.
г) void setValue(int x, int y, int value) - устанавливает переданное значение в ячейку массива (матрицы) с координатами x, y.


Требования:
1.	В классе Field должен быть создан метод print без параметров.
2.	В классе Field должен быть создан метод removeFullLines без параметров.
3.	В классе Field должен быть создан метод getValue с двумя параметрами типа int.
4.	В классе Field должен быть создан метод setValue c тремя параметрами типа int.
5.	Метод print не должен возвращать значение.
6.	Метод removeFullLines не должен возвращать значение.
7.	Метод getValue должен возвращать значение типа Integer.
8.	Метод setValue не должен возвращать значение.


Тетрис(7)

Теперь перейдем к классу Field.
Он будет отвечать за хранение данных о текущих занятых и свободных клетках на поле игры.
Добавь в класс Field два поля поля: width (ширина) типа int, height(высота) типа int.
Так же нам понадобится матрица - двумерный массив: matrix(матрица) типа int[][];
Там же добавь getter&#39;ы для созданных переменных.
Добавь конструктор с двумя параметрами width и height. И не забудь про матрицу.

ВАЖНО!
Двумерный массив можно представить как массив массивов или как прямоугольную матрицу.
При этом первой координатой в массиве у нас будет номер строки, а второй - столбца.
Другими словами ячейка с координатами x, y - это matrix[y][x].



Тетрис(7)

Теперь нужно создать объект самого Тетриса.
Добавь в класс Tetris статическое поле game типа Tetris.
Поле game НЕ должно быть приватным.

Затем в методе main создай объект типа Тетрис и сохрани его в эту переменную.
Затем добавь вызов метода run.



Тетрис(7)

Так же еще нам понадобится пара методов.
Добавь в класс Tetris методы run() и step():

run() будет отвечать за всю игру.
А step() - за один шаг в игре.

Тип возвращаемого значения void для обоих методов.

Тут и в будущем, если нет явных указаний с каким модификатором доступа создавать метод, то он должен быть публичным, а поле приватным.

*В общем случае, стоит руководствоваться правилом использования наиболее строгого(из возможных) модификатора доступа.
*Т.е. если логика системы предполагает обращения к методу извне класса, мы не сможем сделать такой метод приватным.
*Но также нет никаких причин указывать уровень доступа public для методов которые будут использованы только в рамках пакета.
*Поначалу это кажется несущественным, но на самом деле это один из основополагающих принципов ООП.
*Учись сразу делать правильно!



Тетрис(7)

Поле есть, фигура есть, а как их получить?

Добавь геттеры для полей field и figure.



Тетрис(7)

Отлично!
Теперь добавь в класс Tetris два поля: field типа Field и figure типа Figure.



