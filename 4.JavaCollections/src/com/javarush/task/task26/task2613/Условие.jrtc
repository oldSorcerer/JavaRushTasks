taskKey="com.javarush.task.task26.task2613.big02"\n\nCashMachine (2)

1. Создай в ConsoleHelper два статических метода:
1.1 writeMessage(String message), который будет писать в консоль наше сообщение.
1.2 String readString(), который будет считывать с консоли строку и возвращать ее.
Если возникнет какое-то исключение при работе с консолью, то перехватим его и не будем обрабатывать.
Кстати, создадим только один экземпляр BufferedReader-а, в статическом поле bis.

2. Создай пакет exception, в который поместим два checked исключения:
2.1 InterruptOperationException будем кидать, когда нужно прервать текущую операцию и выйти из приложения.
2.2 NotEnoughMoneyException будем кидать, когда не сможем выдать запрашиваемую сумму.


Требования:
1.	Класс InterruptOperationException должен быть создан в отдельном файле, и быть checked исключением.
2.	Класс NotEnoughMoneyException должен быть создан в отдельном файле, и быть checked исключением.
3.	Класс ConsoleHelper должен содержать приватное статическое поле BufferedReader bis, которое должно быть сразу проинициализировано.
4.	Класс ConsoleHelper должен содержать публичный статический метод writeMessage(String message), который должен выводить в консоль переданный параметр.
5.	Класс ConsoleHelper должен содержать публичный статический метод readString(), который должен считывать с консоли строку и возвращать ее.


CashMachine (2)

Давай напишем эмулятор работы банкомата.
Операции, которые будем поддерживать, следующие:
поместить деньги, снять деньги, показать состояние банкомата.
Также будем поддерживать мультивалютность.
Купюрами будем оперировать теми, которые поместим в банкомат.
Если для снятия требуемой суммы будет недостаточно банкнот, то сообщим юзеру об этом.
Понятно, что всё должно быть user friendly, поэтому придется наводить рюшечки.

Итак:
1. Создай класс CashMachine с методом main.
2. Наши операции зададим в энуме Operation: INFO, DEPOSIT, WITHDRAW.
Т.к. всё должно быть user friendly, то на выход из приложения надо попрощаться с юзером.
Поэтому добавим еще операцию EXIT.
3. Т.к мы будем активно общаться с юзером, то будет много выводимого текста.
Чтобы работу с консолью сосредоточить в одном месте, создадим класс ConsoleHelper.



